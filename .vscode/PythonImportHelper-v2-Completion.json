[
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "as_completed",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "as_completed",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "modules",
        "description": "modules",
        "isExtraImport": true,
        "detail": "modules",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "mkdir",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getpid",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "environ",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "load",
        "importPath": "json",
        "description": "json",
        "isExtraImport": true,
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "list_az",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "list_az",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info_metrics",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "create_folder_if_not_exist",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "boto3",
        "description": "boto3",
        "isExtraImport": true,
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "boto3",
        "description": "boto3",
        "isExtraImport": true,
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "DataFrame",
        "importPath": "pandas",
        "description": "pandas",
        "isExtraImport": true,
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "Process",
        "importPath": "psutil",
        "description": "psutil",
        "isExtraImport": true,
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "cloudteam_logger",
        "importPath": "cloudteam_logger",
        "description": "cloudteam_logger",
        "isExtraImport": true,
        "detail": "cloudteam_logger",
        "documentation": {}
    },
    {
        "label": "inventory_collector",
        "importPath": "collectors.collector_inventory",
        "description": "collectors.collector_inventory",
        "isExtraImport": true,
        "detail": "collectors.collector_inventory",
        "documentation": {}
    },
    {
        "label": "metrics_collector",
        "importPath": "collectors.collector_metrics",
        "description": "collectors.collector_metrics",
        "isExtraImport": true,
        "detail": "collectors.collector_metrics",
        "documentation": {}
    },
    {
        "label": "inventory_collector",
        "kind": 2,
        "importPath": "collectors.collector_inventory",
        "description": "collectors.collector_inventory",
        "peekOfCode": "def inventory_collector(uploads_directory, logger, accounts_json, time_generated):\n    # regional scraping per account\n    try:\n        get_all_accounts_regional_inventory(main_dir=uploads_directory, logger_obj=logger,\n                                            account_json=accounts_json, time_generated=time_generated)\n        print(\"Finished Collecting regional inventory\")\n    except Exception as ex:\n        print(f\"Failed to execute get_all_accounts_regional_inventory \\n{ex}\")\n    # # global scraping per account\n    # try:",
        "detail": "collectors.collector_inventory",
        "documentation": {}
    },
    {
        "label": "get_all_accounts_regional_inventory",
        "kind": 2,
        "importPath": "collectors.collector_inventory",
        "description": "collectors.collector_inventory",
        "peekOfCode": "def get_all_accounts_regional_inventory(logger_obj, main_dir: str, account_json: list, time_generated):\n    try:\n        max_worker = 8\n        with ThreadPoolExecutor(max_workers=max_worker) as executor:\n            futures_services = {\n                executor.submit(\n                    lambda acc=account, reg=region: parallel_executor_regional_inventory(\n                        logger_obj, main_dir,\n                        get_aws_session(acc['account_id'],\n                                        reg, role_name=acc['account_role']),",
        "detail": "collectors.collector_inventory",
        "documentation": {}
    },
    {
        "label": "parallel_executor_regional_inventory",
        "kind": 2,
        "importPath": "collectors.collector_inventory",
        "description": "collectors.collector_inventory",
        "peekOfCode": "def parallel_executor_regional_inventory(logger_obj, main_dir: str, session, region: str, time_generated: datetime, account):\n    # Initialize functions clients for services you want to list resources from in parallel\n    functions_map = {\n        'logs': list_logs_groups,\n        'ec2': list_ec2,\n        'ami': list_ami,\n        'snapshot': list_ec2_snapshots,\n        'snapshots_fsr': list_ec2_snapshots_fsr,\n        'sqs': list_sqs,\n        'sns': list_sns,",
        "detail": "collectors.collector_inventory",
        "documentation": {}
    },
    {
        "label": "lock",
        "kind": 5,
        "importPath": "collectors.collector_inventory",
        "description": "collectors.collector_inventory",
        "peekOfCode": "lock = Lock()\ndef inventory_collector(uploads_directory, logger, accounts_json, time_generated):\n    # regional scraping per account\n    try:\n        get_all_accounts_regional_inventory(main_dir=uploads_directory, logger_obj=logger,\n                                            account_json=accounts_json, time_generated=time_generated)\n        print(\"Finished Collecting regional inventory\")\n    except Exception as ex:\n        print(f\"Failed to execute get_all_accounts_regional_inventory \\n{ex}\")\n    # # global scraping per account",
        "detail": "collectors.collector_inventory",
        "documentation": {}
    },
    {
        "label": "metrics_collector",
        "kind": 2,
        "importPath": "collectors.collector_metrics",
        "description": "collectors.collector_metrics",
        "peekOfCode": "def metrics_collector(uploads_directory, logger, accounts_json, time_generated, metrics):\n    # regional scraping per account\n    try:\n        get_all_accounts_metrics(main_dir=uploads_directory, logger_obj=logger,\n                                 account_json=accounts_json, time_generated=time_generated, metrics=metrics)\n        print(\"Finished Collecting regional inventory\")\n    except Exception as ex:\n        print(f\"Failed to execute get_all_accounts_regional_inventory \\n{ex}\")\ndef parallel_executor_inventory_metrics(logger_obj, main_dir, session, region, account, time_generated, metrics):\n    tasks = {}",
        "detail": "collectors.collector_metrics",
        "documentation": {}
    },
    {
        "label": "parallel_executor_inventory_metrics",
        "kind": 2,
        "importPath": "collectors.collector_metrics",
        "description": "collectors.collector_metrics",
        "peekOfCode": "def parallel_executor_inventory_metrics(logger_obj, main_dir, session, region, account, time_generated, metrics):\n    tasks = {}\n    global_tasks = {}\n    functionsz_map = {\n        'ec2_instances_metrics': ec2_instances_metrics,\n        'ebs_volumes_metrics': ebs_volumes_metrics,\n        'functions_metrics': functions_metrics,\n        'efs_filesystem_metrics': efs_filesystem_metrics,\n        'ecr_metrics': ecr_metrics,\n        'cloudhsmv2_metrics': cloudhsmv2_metrics,",
        "detail": "collectors.collector_metrics",
        "documentation": {}
    },
    {
        "label": "get_all_accounts_metrics",
        "kind": 2,
        "importPath": "collectors.collector_metrics",
        "description": "collectors.collector_metrics",
        "peekOfCode": "def get_all_accounts_metrics(logger_obj, main_dir: str, account_json: list, time_generated, metrics):\n    try:\n        max_worker = len(account_json['accounts'])\n        if max_worker > 6:\n            max_worker = 5\n        with ThreadPoolExecutor(max_workers=max_worker) as executor:\n            futures_services = {}\n            for account in account_json['accounts']:\n                session = get_aws_session(\n                    account['account_id'], role_name=account['account_role'])",
        "detail": "collectors.collector_metrics",
        "documentation": {}
    },
    {
        "label": "lock",
        "kind": 5,
        "importPath": "collectors.collector_metrics",
        "description": "collectors.collector_metrics",
        "peekOfCode": "lock = Lock()\ndef metrics_collector(uploads_directory, logger, accounts_json, time_generated, metrics):\n    # regional scraping per account\n    try:\n        get_all_accounts_metrics(main_dir=uploads_directory, logger_obj=logger,\n                                 account_json=accounts_json, time_generated=time_generated, metrics=metrics)\n        print(\"Finished Collecting regional inventory\")\n    except Exception as ex:\n        print(f\"Failed to execute get_all_accounts_regional_inventory \\n{ex}\")\ndef parallel_executor_inventory_metrics(logger_obj, main_dir, session, region, account, time_generated, metrics):",
        "detail": "collectors.collector_metrics",
        "documentation": {}
    },
    {
        "label": "customer",
        "kind": 5,
        "importPath": "files.accountsgenerator",
        "description": "files.accountsgenerator",
        "peekOfCode": "customer = 'shufersal'\njsons = {'accounts': []}\nwith open(f\"{os.path.dirname(os.path.abspath(__file__))}/accounts.txt\", \"r\", encoding='UTF-8') as f:\n    file = csv.reader(f)\n    next(file)\n    for row in file:\n        jsons['accounts'].append({\n            \"account_id\": row[0], \"account_role\": \"Cloudteam-FinOps\"})\n# Convert dictionary to JSON string\njson_string = json.loads(json.dumps(jsons))",
        "detail": "files.accountsgenerator",
        "documentation": {}
    },
    {
        "label": "jsons",
        "kind": 5,
        "importPath": "files.accountsgenerator",
        "description": "files.accountsgenerator",
        "peekOfCode": "jsons = {'accounts': []}\nwith open(f\"{os.path.dirname(os.path.abspath(__file__))}/accounts.txt\", \"r\", encoding='UTF-8') as f:\n    file = csv.reader(f)\n    next(file)\n    for row in file:\n        jsons['accounts'].append({\n            \"account_id\": row[0], \"account_role\": \"Cloudteam-FinOps\"})\n# Convert dictionary to JSON string\njson_string = json.loads(json.dumps(jsons))\nwith open(f\"{os.path.dirname(os.path.abspath(__file__))}/{customer}.json\", \"w\", encoding='UTF-8') as f:",
        "detail": "files.accountsgenerator",
        "documentation": {}
    },
    {
        "label": "json_string",
        "kind": 5,
        "importPath": "files.accountsgenerator",
        "description": "files.accountsgenerator",
        "peekOfCode": "json_string = json.loads(json.dumps(jsons))\nwith open(f\"{os.path.dirname(os.path.abspath(__file__))}/{customer}.json\", \"w\", encoding='UTF-8') as f:\n    json.dump(json_string, f)",
        "detail": "files.accountsgenerator",
        "documentation": {}
    },
    {
        "label": "list_apigateway",
        "kind": 2,
        "importPath": "modules.API.APIGateway.apigateway",
        "description": "modules.API.APIGateway.apigateway",
        "peekOfCode": "def list_apigateway(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function lists API Gateway resources and saves the inventory as a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_apigateway` function is the path where you\n    want to save the inventory data as a file. It should be a string representing the file path\n    including the file name and extension where you want to store the data. For example, it could be\n    something\n    :param session: The `session` parameter in the `list_apigateway` function is typically an instance\n    of a boto3 session that allows you to connect to AWS services. It is used to create a client for the\n    API Gateway in the specified region. This client is then used to interact with",
        "detail": "modules.API.APIGateway.apigateway",
        "documentation": {}
    },
    {
        "label": "list_apigatewayv2",
        "kind": 2,
        "importPath": "modules.API.APIGateway.apigateway",
        "description": "modules.API.APIGateway.apigateway",
        "peekOfCode": "def list_apigatewayv2(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function lists API Gateway v2 resources and saves the information to a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_apigatewayv2` function is the path where\n    the inventory data will be saved as a file. It is the location where the Parquet file containing the\n    API Gateway v2 inventory information will be stored\n    :param session: The `session` parameter in the `list_apigatewayv2` function is an object\n    representing the current session. It is typically created using the `boto3.Session` class from the\n    AWS SDK for Python (Boto3). This session object stores configuration state and allows you to create\n    service",
        "detail": "modules.API.APIGateway.apigateway",
        "documentation": {}
    },
    {
        "label": "list_appsync",
        "kind": 2,
        "importPath": "modules.API.AppSync.appsync",
        "description": "modules.API.AppSync.appsync",
        "peekOfCode": "def list_appsync(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_appsync` retrieves information about GraphQL APIs using the AWS AppSync client\n    and saves the data to a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_appsync` function is the path where the\n    inventory data will be saved as a Parquet file. This parameter should be a string representing the\n    file path where you want to save the inventory data\n    :param session: The `session` parameter in the `list_appsync` function is an object representing the\n    session used to interact with AWS services. It is typically created using the `boto3.Session` class\n    and contains the necessary credentials and configuration to make API requests to AWS services",
        "detail": "modules.API.AppSync.appsync",
        "documentation": {}
    },
    {
        "label": "list_amplify",
        "kind": 2,
        "importPath": "modules.Applications.Amplify.amplify",
        "description": "modules.Applications.Amplify.amplify",
        "peekOfCode": "def list_amplify(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_amplify` retrieves a list of Amplify apps using the AWS Amplify client and saves\n    the information to a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_amplify` function is the path where the\n    output file will be saved. It should be a string representing the file path where the Parquet file\n    will be stored\n    :param session: The `session` parameter in the `list_amplify` function is typically an instance of a\n    boto3 session that is used to create a client for the AWS Amplify service in a specific region. It\n    allows you to interact with AWS services using the credentials and configuration provided in the",
        "detail": "modules.Applications.Amplify.amplify",
        "documentation": {}
    },
    {
        "label": "list_appintegrations",
        "kind": 2,
        "importPath": "modules.Applications.AppIntegrations.appintegrations",
        "description": "modules.Applications.AppIntegrations.appintegrations",
        "peekOfCode": "def list_appintegrations(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_appintegrations` retrieves a list of applications from an AWS account and saves\n    the information in a Parquet file.\n    :param file_path: The `file_path` parameter is the path where the output file will be saved. It\n    should be a string representing the file path including the file name and extension where the\n    inventory data will be stored\n    :param session: The `session` parameter is typically an instance of a boto3 session that allows you\n    to interact with AWS services. It is used to create a client for the `appintegrations` service in\n    the specified `region`",
        "detail": "modules.Applications.AppIntegrations.appintegrations",
        "documentation": {}
    },
    {
        "label": "list_application_autoscaling",
        "kind": 2,
        "importPath": "modules.Applications.ApplicationAutoScaling.applicationautoscaling",
        "description": "modules.Applications.ApplicationAutoScaling.applicationautoscaling",
        "peekOfCode": "def list_application_autoscaling(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function retrieves and saves information about scalable targets for different service\n    namespaces using the Application Auto Scaling client.\n    :param file_path: The `file_path` parameter in the `list_application_autoscaling` function is the\n    path where the output file will be saved. It should be a string representing the file path where the\n    inventory data will be stored\n    :param session: The `session` parameter in the `list_application_autoscaling` function is typically\n    an instance of a boto3 session that is used to create a client for interacting with AWS services. It\n    allows you to configure credentials, region, and other settings for making API calls to AWS",
        "detail": "modules.Applications.ApplicationAutoScaling.applicationautoscaling",
        "documentation": {}
    },
    {
        "label": "servicesNamespaces",
        "kind": 5,
        "importPath": "modules.Applications.ApplicationAutoScaling.applicationautoscaling",
        "description": "modules.Applications.ApplicationAutoScaling.applicationautoscaling",
        "peekOfCode": "servicesNamespaces = ['ecs', 'elasticmapreduce', 'ec2', 'appstream', 'dynamodb', 'rds', 'sagemaker',\n                      'custom-resource', 'comprehend', 'lambda', 'cassandra', 'kafka', 'elasticache', 'neptune']\ndef list_application_autoscaling(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function retrieves and saves information about scalable targets for different service\n    namespaces using the Application Auto Scaling client.\n    :param file_path: The `file_path` parameter in the `list_application_autoscaling` function is the\n    path where the output file will be saved. It should be a string representing the file path where the\n    inventory data will be stored\n    :param session: The `session` parameter in the `list_application_autoscaling` function is typically",
        "detail": "modules.Applications.ApplicationAutoScaling.applicationautoscaling",
        "documentation": {}
    },
    {
        "label": "list_applicationcostprofiler",
        "kind": 2,
        "importPath": "modules.Applications.ApplicationCostProfiler.applicationcostprofiler",
        "description": "modules.Applications.ApplicationCostProfiler.applicationcostprofiler",
        "peekOfCode": "def list_applicationcostprofiler(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function retrieves and saves application cost profiler report definitions for a\n    specified account and region.\n    :param file_path: The `file_path` parameter in the `list_applicationcostprofiler` function is the\n    path where the inventory data will be saved as a file. It should be a string representing the file\n    path where you want to save the data. For example, it could be something like \"/path/to/save/in\n    :param session: The `session` parameter is an AWS session object that is used to create a client for\n    the Application Cost Profiler service in a specific region. It allows the function to interact with\n    the service using the credentials and configuration provided in the session object",
        "detail": "modules.Applications.ApplicationCostProfiler.applicationcostprofiler",
        "documentation": {}
    },
    {
        "label": "list_ads_agents",
        "kind": 2,
        "importPath": "modules.Applications.ApplicationDiscoveryService.applicationdiscoveryservice",
        "description": "modules.Applications.ApplicationDiscoveryService.applicationdiscoveryservice",
        "peekOfCode": "def list_ads_agents(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('discovery', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_agents(",
        "detail": "modules.Applications.ApplicationDiscoveryService.applicationdiscoveryservice",
        "documentation": {}
    },
    {
        "label": "list_capacityreservations",
        "kind": 2,
        "importPath": "modules.Billing.CapacityReservations.capacityreservations",
        "description": "modules.Billing.CapacityReservations.capacityreservations",
        "peekOfCode": "def list_capacityreservations(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_appconfig` retrieves a list of applications from Alexa for Business and saves the\n    information in a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_appconfig` function is the path where the\n    output file will be saved. It is the location on the file system where the Parquet file containing\n    the inventory information will be stored\n    :param session: The `session` parameter in the `list_appconfig` function is an object that\n    represents the current session with AWS services. It is typically created using the\n    `boto3.Session()` method and is used to create clients and resources for interacting with AWS",
        "detail": "modules.Billing.CapacityReservations.capacityreservations",
        "documentation": {}
    },
    {
        "label": "list_ec2_reservations",
        "kind": 2,
        "importPath": "modules.Billing.Reservations.reservations",
        "description": "modules.Billing.Reservations.reservations",
        "peekOfCode": "def list_ec2_reservations(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_reserved_instances(",
        "detail": "modules.Billing.Reservations.reservations",
        "documentation": {}
    },
    {
        "label": "list_rds_reservations",
        "kind": 2,
        "importPath": "modules.Billing.Reservations.reservations",
        "description": "modules.Billing.Reservations.reservations",
        "peekOfCode": "def list_rds_reservations(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('rds', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_reserved_db_instances(",
        "detail": "modules.Billing.Reservations.reservations",
        "documentation": {}
    },
    {
        "label": "list_opensearch_reservations",
        "kind": 2,
        "importPath": "modules.Billing.Reservations.reservations",
        "description": "modules.Billing.Reservations.reservations",
        "peekOfCode": "def list_opensearch_reservations(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('opensearch', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_reserved_instances(",
        "detail": "modules.Billing.Reservations.reservations",
        "documentation": {}
    },
    {
        "label": "list_elasticsearch_reservations",
        "kind": 2,
        "importPath": "modules.Billing.Reservations.reservations",
        "description": "modules.Billing.Reservations.reservations",
        "peekOfCode": "def list_elasticsearch_reservations(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('es', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_reserved_elasticsearch_instances(",
        "detail": "modules.Billing.Reservations.reservations",
        "documentation": {}
    },
    {
        "label": "list_elasticcache_reservations",
        "kind": 2,
        "importPath": "modules.Billing.Reservations.reservations",
        "description": "modules.Billing.Reservations.reservations",
        "peekOfCode": "def list_elasticcache_reservations(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('elasticache', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_reserved_cache_nodes(",
        "detail": "modules.Billing.Reservations.reservations",
        "documentation": {}
    },
    {
        "label": "list_memorydb_reservations",
        "kind": 2,
        "importPath": "modules.Billing.Reservations.reservations",
        "description": "modules.Billing.Reservations.reservations",
        "peekOfCode": "def list_memorydb_reservations(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('memorydb', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_reserved_nodes(",
        "detail": "modules.Billing.Reservations.reservations",
        "documentation": {}
    },
    {
        "label": "list_redshift_reservations",
        "kind": 2,
        "importPath": "modules.Billing.Reservations.reservations",
        "description": "modules.Billing.Reservations.reservations",
        "peekOfCode": "def list_redshift_reservations(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('redshift', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_reserved_nodes(",
        "detail": "modules.Billing.Reservations.reservations",
        "documentation": {}
    },
    {
        "label": "list_savingsplans",
        "kind": 2,
        "importPath": "modules.Billing.SavingsPlans.savingsplans",
        "description": "modules.Billing.SavingsPlans.savingsplans",
        "peekOfCode": "def list_savingsplans(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('savingsplans', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_savings_plans(",
        "detail": "modules.Billing.SavingsPlans.savingsplans",
        "documentation": {}
    },
    {
        "label": "list_appconfig",
        "kind": 2,
        "importPath": "modules.Compute.AppConfig.appconfig",
        "description": "modules.Compute.AppConfig.appconfig",
        "peekOfCode": "def list_appconfig(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_appconfig` retrieves a list of applications from Alexa for Business and saves the\n    information in a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_appconfig` function is the path where the\n    output file will be saved. It is the location on the file system where the Parquet file containing\n    the inventory information will be stored\n    :param session: The `session` parameter in the `list_appconfig` function is an object that\n    represents the current session with AWS services. It is typically created using the\n    `boto3.Session()` method and is used to create clients and resources for interacting with AWS",
        "detail": "modules.Compute.AppConfig.appconfig",
        "documentation": {}
    },
    {
        "label": "list_appstream",
        "kind": 2,
        "importPath": "modules.Compute.AppStream.appstream",
        "description": "modules.Compute.AppStream.appstream",
        "peekOfCode": "def list_appstream(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_appstream` retrieves information about image builders in AWS AppStream and saves\n    it as a Parquet file.\n    :param file_path: The `file_path` parameter is the path where the output file will be saved. It is a\n    string that represents the location where the file will be stored\n    :param session: The `session` parameter in the `list_appstream` function is typically an instance of\n    a boto3 session that allows you to create service clients for AWS services. It is used to create a\n    client for the AppStream service in the specified region\n    :param region: The `region` parameter in the `list_appstream` function is used to specify the AWS",
        "detail": "modules.Compute.AppStream.appstream",
        "documentation": {}
    },
    {
        "label": "list_autoscaling",
        "kind": 2,
        "importPath": "modules.Compute.AutoScaling.autoscaling",
        "description": "modules.Compute.AutoScaling.autoscaling",
        "peekOfCode": "def list_autoscaling(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_autoscaling` retrieves information about auto-scaling groups and saves it to a\n    Parquet file.\n    :param file_path: The `file_path` parameter in the `list_autoscaling` function is the path where the\n    output file will be saved. It is the location where the Parquet file containing the inventory\n    information will be stored\n    :param session: The `session` parameter in the `list_autoscaling` function is typically an instance\n    of a boto3 session that allows you to create service clients for AWS services. It is used to\n    interact with the AWS Auto Scaling service in this particular function",
        "detail": "modules.Compute.AutoScaling.autoscaling",
        "documentation": {}
    },
    {
        "label": "list_autoscaling_plans",
        "kind": 2,
        "importPath": "modules.Compute.AutoScaling.autoscaling",
        "description": "modules.Compute.AutoScaling.autoscaling",
        "peekOfCode": "def list_autoscaling_plans(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_autoscaling_plans` retrieves and processes autoscaling plans information and\n    saves it as Parquet files.\n    :param file_path: The `file_path` parameter in the `list_autoscaling_plans` function is the path\n    where the output files will be saved. It is the location where the Parquet files containing the\n    autoscaling plans information will be stored\n    :param session: The `session` parameter in the `list_autoscaling_plans` function is typically an\n    instance of a boto3 session that allows you to create service clients for AWS services. It is used\n    to create a client for the AWS Auto Scaling Plans service in the specified region",
        "detail": "modules.Compute.AutoScaling.autoscaling",
        "documentation": {}
    },
    {
        "label": "list_batch_compute",
        "kind": 2,
        "importPath": "modules.Compute.Batch.batch",
        "description": "modules.Compute.Batch.batch",
        "peekOfCode": "def list_batch_compute(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('batch', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_compute_environments(",
        "detail": "modules.Compute.Batch.batch",
        "documentation": {}
    },
    {
        "label": "list_batch_jobs",
        "kind": 2,
        "importPath": "modules.Compute.Batch.batch",
        "description": "modules.Compute.Batch.batch",
        "peekOfCode": "def list_batch_jobs(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('batch', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    job_queues = []\n    while True:\n        try:\n            response = client.describe_job_queues(",
        "detail": "modules.Compute.Batch.batch",
        "documentation": {}
    },
    {
        "label": "list_volumes",
        "kind": 2,
        "importPath": "modules.Compute.EBS.ebs",
        "description": "modules.Compute.EBS.ebs",
        "peekOfCode": "def list_volumes(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function lists volumes in an AWS account and saves the information in a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_volumes` function is the path where the\n    inventory data will be saved as a Parquet file. It is the location on the file system where the\n    output file will be stored\n    :param session: The `session` parameter in the `list_volumes` function is typically an AWS session\n    object that is used to create clients for various AWS services. It is commonly created using the\n    `boto3.Session` class and is used to interact with AWS services in a specific region\n    :param region: The `region` parameter in the `list_volumes` function is used to specify the AWS",
        "detail": "modules.Compute.EBS.ebs",
        "documentation": {}
    },
    {
        "label": "ebs_volumes_metrics",
        "kind": 2,
        "importPath": "modules.Compute.EBS.ebs_metrics",
        "description": "modules.Compute.EBS.ebs_metrics",
        "peekOfCode": "def ebs_volumes_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account.get('account_name', '')).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_volumes(",
        "detail": "modules.Compute.EBS.ebs_metrics",
        "documentation": {}
    },
    {
        "label": "list_ec2",
        "kind": 2,
        "importPath": "modules.Compute.EC2.ec2",
        "description": "modules.Compute.EC2.ec2",
        "peekOfCode": "def list_ec2(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_ec2` retrieves information about EC2 instances, formats the data, and saves it as\n    a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_ec2` function refers to the path where the\n    output file will be saved. This should be a valid file path on your system where you want to store\n    the data retrieved from the EC2 instances\n    :param session: The `session` parameter in the `list_ec2` function is typically an instance of\n    `boto3.Session` class that represents the connection to AWS services. It is used to create service\n    clients like `ec2` in this case, which allows you to make API calls to AWS services",
        "detail": "modules.Compute.EC2.ec2",
        "documentation": {}
    },
    {
        "label": "list_ami",
        "kind": 2,
        "importPath": "modules.Compute.EC2.ec2",
        "description": "modules.Compute.EC2.ec2",
        "peekOfCode": "def list_ami(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_ami` retrieves information about AMIs owned by the specified account in the given\n    region and saves the data in a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_ami` function is the path where the output\n    file will be saved. It should be a string representing the file path where the Parquet file will be\n    stored\n    :param session: The `session` parameter in the `list_ami` function is an AWS session object that is\n    used to create a client for the EC2 service in a specific region. This session object typically\n    contains the credentials and configuration needed to interact with AWS services",
        "detail": "modules.Compute.EC2.ec2",
        "documentation": {}
    },
    {
        "label": "ec2_instances_metrics",
        "kind": 2,
        "importPath": "modules.Compute.EC2.ec2_metrics",
        "description": "modules.Compute.EC2.ec2_metrics",
        "peekOfCode": "def ec2_instances_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account.get('account_name', '')).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_instances(",
        "detail": "modules.Compute.EC2.ec2_metrics",
        "documentation": {}
    },
    {
        "label": "list_emr",
        "kind": 2,
        "importPath": "modules.Compute.EMR.emr",
        "description": "modules.Compute.EMR.emr",
        "peekOfCode": "def list_emr(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_emr` retrieves information about EMR clusters and saves it to a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_emr` function is the path where the output\n    file will be saved. It should be a string representing the file path where the Parquet file will be\n    stored\n    :param session: The `session` parameter in the `list_emr` function is typically an AWS session\n    object that is used to create clients for various AWS services. It is used to interact with the\n    Amazon EMR (Elastic MapReduce) service in this specific function. The session object is usually\n    created using the",
        "detail": "modules.Compute.EMR.emr",
        "documentation": {}
    },
    {
        "label": "list_emr_instance_group",
        "kind": 2,
        "importPath": "modules.Compute.EMR.emr",
        "description": "modules.Compute.EMR.emr",
        "peekOfCode": "def list_emr_instance_group(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('emr', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    clusters = []\n    while True:\n        try:\n            response = client.list_clusters(",
        "detail": "modules.Compute.EMR.emr",
        "documentation": {}
    },
    {
        "label": "list_emr_containers",
        "kind": 2,
        "importPath": "modules.Compute.EMR.emr",
        "description": "modules.Compute.EMR.emr",
        "peekOfCode": "def list_emr_containers(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('emr-containers', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_virtual_clusters(",
        "detail": "modules.Compute.EMR.emr",
        "documentation": {}
    },
    {
        "label": "list_emr_containers_jobs",
        "kind": 2,
        "importPath": "modules.Compute.EMR.emr",
        "description": "modules.Compute.EMR.emr",
        "peekOfCode": "def list_emr_containers_jobs(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('emr-containers', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    clusters = []\n    while True:\n        try:\n            response = client.list_virtual_clusters(",
        "detail": "modules.Compute.EMR.emr",
        "documentation": {}
    },
    {
        "label": "list_emr_serverless_jobs",
        "kind": 2,
        "importPath": "modules.Compute.EMR.emr",
        "description": "modules.Compute.EMR.emr",
        "peekOfCode": "def list_emr_serverless_jobs(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('emr-serverless', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    clusters = []\n    while True:\n        try:\n            response = client.list_applications(",
        "detail": "modules.Compute.EMR.emr",
        "documentation": {}
    },
    {
        "label": "list_elasticbeanstalk",
        "kind": 2,
        "importPath": "modules.Compute.ElasticBeanstalk.elasticbeanstalk",
        "description": "modules.Compute.ElasticBeanstalk.elasticbeanstalk",
        "peekOfCode": "def list_elasticbeanstalk(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function retrieves information about Elastic Beanstalk environments and saves it to a\n    Parquet file.\n    :param file_path: The `file_path` parameter in the `list_elasticbeanstalk` function is the path\n    where the output data will be saved as a Parquet file. This parameter should be a string\n    representing the file path where you want to save the data\n    :param session: The `session` parameter in the `list_elasticbeanstalk` function is typically an AWS\n    session object that is used to create clients for AWS services. It is used to interact with AWS\n    Elastic Beanstalk in this case. The session object contains information such as credentials, region,",
        "detail": "modules.Compute.ElasticBeanstalk.elasticbeanstalk",
        "documentation": {}
    },
    {
        "label": "list_elasticbeanstalk_applications",
        "kind": 2,
        "importPath": "modules.Compute.ElasticBeanstalk.elasticbeanstalk",
        "description": "modules.Compute.ElasticBeanstalk.elasticbeanstalk",
        "peekOfCode": "def list_elasticbeanstalk_applications(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function lists Elastic Beanstalk applications and saves the information to a Parquet\n    file.\n    :param file_path: The `file_path` parameter in the `list_elasticbeanstalk_applications` function is\n    the path where the output file will be saved. It is the location on your file system where the\n    function will write the data it retrieves about Elastic Beanstalk applications\n    :param session: The `session` parameter in the `list_elasticbeanstalk_applications` function is\n    typically an instance of a boto3 session that allows you to create service clients for AWS services.\n    It is used to interact with the Elastic Beanstalk service in the specified AWS region. You can",
        "detail": "modules.Compute.ElasticBeanstalk.elasticbeanstalk",
        "documentation": {}
    },
    {
        "label": "list_lambda",
        "kind": 2,
        "importPath": "modules.Compute.Functions.functions",
        "description": "modules.Compute.Functions.functions",
        "peekOfCode": "def list_lambda(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function retrieves a list of Lambda functions using the AWS SDK, processes the data, and\n    saves it as a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_lambda` function represents the path where\n    the inventory data will be saved as a file. This could be a file path on your local machine or a\n    cloud storage location where you want to store the inventory information\n    :param session: The `session` parameter is typically an instance of `boto3.Session` that represents\n    your AWS credentials and configuration. It is used to create clients for AWS services like Lambda in\n    this case",
        "detail": "modules.Compute.Functions.functions",
        "documentation": {}
    },
    {
        "label": "functions_metrics",
        "kind": 2,
        "importPath": "modules.Compute.Functions.functions_metrics",
        "description": "modules.Compute.Functions.functions_metrics",
        "peekOfCode": "def functions_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('lambda', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.list_functions(\n                Marker=next_token) if next_token else client.list_functions()",
        "detail": "modules.Compute.Functions.functions_metrics",
        "documentation": {}
    },
    {
        "label": "list_ssm",
        "kind": 2,
        "importPath": "modules.Compute.SSM.ssm",
        "description": "modules.Compute.SSM.ssm",
        "peekOfCode": "def list_ssm(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_ssm` retrieves and saves information about SSM parameters to a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_ssm` function is the path where the output\n    file will be saved. It is the location on the file system where the Parquet file containing the SSM\n    inventory data will be stored\n    :param session: The `session` parameter is typically an instance of `boto3.Session` class that\n    represents your AWS credentials and configuration. It is used to create service clients for AWS\n    services like SSM (Systems Manager) in this case. The `client` method of the `session` object is\n    used to",
        "detail": "modules.Compute.SSM.ssm",
        "documentation": {}
    },
    {
        "label": "list_ec2_snapshots",
        "kind": 2,
        "importPath": "modules.Compute.Snapshots.snapshot",
        "description": "modules.Compute.Snapshots.snapshot",
        "peekOfCode": "def list_ec2_snapshots(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_ec2_snapshots` retrieves information about EC2 snapshots, formats the data, and\n    saves it to a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_ec2_snapshots` function refers to the path\n    where the output files will be saved. This should be a valid file path on your system where the\n    function will save the EC2 snapshots information in Parquet format\n    :param session: The `session` parameter in the `list_ec2_snapshots` function is typically an\n    instance of `boto3.Session` class that represents your AWS credentials and configuration. It is used\n    to create an EC2 client in the specified region for interacting with AWS services. You can create a",
        "detail": "modules.Compute.Snapshots.snapshot",
        "documentation": {}
    },
    {
        "label": "list_ec2_snapshots_fsr",
        "kind": 2,
        "importPath": "modules.Compute.Snapshots.snapshot",
        "description": "modules.Compute.Snapshots.snapshot",
        "peekOfCode": "def list_ec2_snapshots_fsr(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_fast_snapshot_restores(",
        "detail": "modules.Compute.Snapshots.snapshot",
        "documentation": {}
    },
    {
        "label": "list_workspaces",
        "kind": 2,
        "importPath": "modules.Compute.Workspaces.workspaces",
        "description": "modules.Compute.Workspaces.workspaces",
        "peekOfCode": "def list_workspaces(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function lists workspaces using the AWS WorkSpaces client and saves the inventory\n    information as Parquet files.\n    :param file_path: The `file_path` parameter in the `list_workspaces` function is the path where the\n    output file will be saved. It is the location on your file system where the function will store the\n    workspace information in a Parquet file format\n    :param session: The `session` parameter in the `list_workspaces` function is typically an instance\n    of the `boto3.Session` class, which is used to create service clients for AWS services. It allows\n    you to make API requests to AWS services using the credentials and configuration provided in the",
        "detail": "modules.Compute.Workspaces.workspaces",
        "documentation": {}
    },
    {
        "label": "list_workspaces_thin_client",
        "kind": 2,
        "importPath": "modules.Compute.Workspaces.workspaces",
        "description": "modules.Compute.Workspaces.workspaces",
        "peekOfCode": "def list_workspaces_thin_client(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function retrieves information about thin clients in AWS WorkSpaces and saves it as\n    Parquet files.\n    :param file_path: The `file_path` parameter in the `list_workspaces_thin_client` function is the\n    path where the inventory data will be saved as a Parquet file. It is the location where the function\n    will write the output data\n    :param session: The `session` parameter in the `list_workspaces_thin_client` function is typically\n    an instance of a boto3 session that allows you to create service clients. It is used to create a\n    client for the AWS WorkSpaces service in the specified region. You can create a session using the `b",
        "detail": "modules.Compute.Workspaces.workspaces",
        "documentation": {}
    },
    {
        "label": "list_appmesh",
        "kind": 2,
        "importPath": "modules.Containers.AppMesh.appmesh",
        "description": "modules.Containers.AppMesh.appmesh",
        "peekOfCode": "def list_appmesh(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_appmesh` retrieves information about App Mesh resources and saves it to a Parquet\n    file.\n    :param file_path: The `file_path` parameter in the `list_appmesh` function is the path where the\n    output files will be saved. It is the location where the inventory data for App Mesh will be stored\n    in Parquet format\n    :param session: The `session` parameter in the `list_appmesh` function is typically an instance of a\n    boto3 session that is used to create a client for AWS AppConfig service. It allows you to make API\n    calls to AWS AppConfig in a specific region with the necessary credentials and configuration",
        "detail": "modules.Containers.AppMesh.appmesh",
        "documentation": {}
    },
    {
        "label": "list_apprunner",
        "kind": 2,
        "importPath": "modules.Containers.AppRunner.apprunner",
        "description": "modules.Containers.AppRunner.apprunner",
        "peekOfCode": "def list_apprunner(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_apprunner` retrieves information about App Runner services and saves it to a\n    Parquet file.\n    :param file_path: The `file_path` parameter in the `list_apprunner` function is the path where the\n    output file will be saved. It is the location on the file system where the Parquet file containing\n    the inventory data will be stored\n    :param session: The `session` parameter in the `list_apprunner` function is an object that\n    represents the current session with AWS services. It is typically created using the `boto3.Session`\n    class and is used to create clients and resources for interacting with AWS services",
        "detail": "modules.Containers.AppRunner.apprunner",
        "documentation": {}
    },
    {
        "label": "list_ecr_repositories",
        "kind": 2,
        "importPath": "modules.Containers.ECR.ecr",
        "description": "modules.Containers.ECR.ecr",
        "peekOfCode": "def list_ecr_repositories(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function lists ECR repositories, extracts common information, and saves the data as\n    Parquet files.\n    :param file_path: The `file_path` parameter in the `list_ecr_repositories` function is the path\n    where the output files will be saved. It should be a string representing the directory or file path\n    where the Parquet files will be stored\n    :param session: The `session` parameter in the `list_ecr_repositories` function is typically an\n    instance of a boto3 session that allows you to create service clients for AWS services. It is used\n    to create a client for the Amazon Elastic Container Registry (ECR) service in the specified AWS",
        "detail": "modules.Containers.ECR.ecr",
        "documentation": {}
    },
    {
        "label": "list_ecr_repositories_images",
        "kind": 2,
        "importPath": "modules.Containers.ECR.ecr",
        "description": "modules.Containers.ECR.ecr",
        "peekOfCode": "def list_ecr_repositories_images(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('ecr', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    repositories = []\n    while True:\n        try:\n            response = client.describe_repositories(",
        "detail": "modules.Containers.ECR.ecr",
        "documentation": {}
    },
    {
        "label": "ecr_metrics",
        "kind": 2,
        "importPath": "modules.Containers.ECR.ecr_metrics",
        "description": "modules.Containers.ECR.ecr_metrics",
        "peekOfCode": "def ecr_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('ecr', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.describe_repositories(\n                nextToken=next_token) if next_token else client.describe_repositories()",
        "detail": "modules.Containers.ECR.ecr_metrics",
        "documentation": {}
    },
    {
        "label": "list_ecs_clusters",
        "kind": 2,
        "importPath": "modules.Containers.ECS.ecs",
        "description": "modules.Containers.ECS.ecs",
        "peekOfCode": "def list_ecs_clusters(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_ecs_clusters` retrieves information about ECS clusters, processes the data, and\n    saves it as a Parquet file.\n    :param file_path: The `file_path` parameter is a string that represents the path where the output\n    file will be saved. It should include the file name and extension (e.g., \"output_file.csv\")\n    :param session: The `session` parameter in the `list_ecs_clusters` function is an AWS session object\n    that is used to create a client for the ECS (Elastic Container Service) service in a specific AWS\n    region. This session object is typically created using the `boto3` library in Python and is\n    :param region: Region is a string representing the AWS region where the ECS clusters are located. It",
        "detail": "modules.Containers.ECS.ecs",
        "documentation": {}
    },
    {
        "label": "list_eks",
        "kind": 2,
        "importPath": "modules.Containers.EKS.eks",
        "description": "modules.Containers.EKS.eks",
        "peekOfCode": "def list_eks(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_eks` retrieves information about EKS clusters and saves it to a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_eks` function is the path where the\n    inventory data will be saved as a file. It is the location where the Parquet file containing the\n    extracted EKS cluster information will be stored\n    :param session: The `session` parameter in the `list_eks` function is typically an instance of\n    `boto3.Session` that is used to create clients for AWS services. It allows you to make API calls to\n    AWS services using the credentials and configuration provided in the session object\n    :param region: Region is a string representing the AWS region where the Amazon EKS clusters are",
        "detail": "modules.Containers.EKS.eks",
        "documentation": {}
    },
    {
        "label": "list_athena",
        "kind": 2,
        "importPath": "modules.Databases.Athena.athena",
        "description": "modules.Databases.Athena.athena",
        "peekOfCode": "def list_athena(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_athena` retrieves and saves information about named queries in AWS Athena for a\n    specific account.\n    :param file_path: The `file_path` parameter is the path where the output file will be saved. It\n    should be a string representing the directory and filename where the file will be stored\n    :param session: The `session` parameter is typically an instance of `boto3.Session` that represents\n    your AWS credentials and configuration. It is used to create clients for AWS services like Athena in\n    this case. You can create a session using `boto3.Session()` and pass it to the `list_ath\n    :param region: The `region` parameter in the `list_athena` function refers to the AWS region where",
        "detail": "modules.Databases.Athena.athena",
        "documentation": {}
    },
    {
        "label": "list_dms_tasks",
        "kind": 2,
        "importPath": "modules.Databases.DMS.dms",
        "description": "modules.Databases.DMS.dms",
        "peekOfCode": "def list_dms_tasks(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('dms', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_replication_tasks(",
        "detail": "modules.Databases.DMS.dms",
        "documentation": {}
    },
    {
        "label": "list_dms_instances",
        "kind": 2,
        "importPath": "modules.Databases.DMS.dms",
        "description": "modules.Databases.DMS.dms",
        "peekOfCode": "def list_dms_instances(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('dms', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_replication_instances(",
        "detail": "modules.Databases.DMS.dms",
        "documentation": {}
    },
    {
        "label": "list_dynamodb",
        "kind": 2,
        "importPath": "modules.Databases.DynamoDB.dynamodb",
        "description": "modules.Databases.DynamoDB.dynamodb",
        "peekOfCode": "def list_dynamodb(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_dynamo` retrieves information about DynamoDB tables and saves it to a file in\n    Parquet format.\n    :param file_path: The `file_path` parameter is the path where the output file will be saved. It is\n    the location on your file system where the function will write the data it collects during the\n    execution\n    :param session: The `session` parameter in the `list_dynamo` function is typically an instance of\n    `boto3.Session` class, which is used to create service clients for AWS services. It allows you to\n    configure credentials, region, and other settings for making API calls to AWS services. You can",
        "detail": "modules.Databases.DynamoDB.dynamodb",
        "documentation": {}
    },
    {
        "label": "list_dynamodb_streams",
        "kind": 2,
        "importPath": "modules.Databases.DynamoDB.dynamodb",
        "description": "modules.Databases.DynamoDB.dynamodb",
        "peekOfCode": "def list_dynamodb_streams(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('dynamodbstreams', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    streams = []\n    while True:\n        try:\n            inventory = []",
        "detail": "modules.Databases.DynamoDB.dynamodb",
        "documentation": {}
    },
    {
        "label": "list_dax",
        "kind": 2,
        "importPath": "modules.Databases.DynamoDB.dynamodb",
        "description": "modules.Databases.DynamoDB.dynamodb",
        "peekOfCode": "def list_dax(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('dax', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            nodes_counter = 0",
        "detail": "modules.Databases.DynamoDB.dynamodb",
        "documentation": {}
    },
    {
        "label": "dynamodb_tables_metrics",
        "kind": 2,
        "importPath": "modules.Databases.DynamoDB.dynamodb_metrics",
        "description": "modules.Databases.DynamoDB.dynamodb_metrics",
        "peekOfCode": "def dynamodb_tables_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('dynamodb', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.list_tables(\n                ExclusiveStartTableName=next_token) if next_token else client.list_tables()",
        "detail": "modules.Databases.DynamoDB.dynamodb_metrics",
        "documentation": {}
    },
    {
        "label": "list_cache",
        "kind": 2,
        "importPath": "modules.Databases.ElastiCache.elasticache",
        "description": "modules.Databases.ElastiCache.elasticache",
        "peekOfCode": "def list_cache(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function retrieves information about cache clusters using the AWS Elasticache client and\n    saves the data in Parquet format.\n    :param file_path: The `file_path` parameter in the `list_cache` function is the path where the cache\n    cluster inventory data will be saved as a Parquet file. This parameter should be a string\n    representing the file path where you want to save the data\n    :param session: The `session` parameter is an object that represents the current session. It is\n    typically used to create clients for AWS services. In the provided code snippet, the `session`\n    object is used to create a client for the Amazon ElastiCache service in a specific AWS region",
        "detail": "modules.Databases.ElastiCache.elasticache",
        "documentation": {}
    },
    {
        "label": "elasticache_metrics",
        "kind": 2,
        "importPath": "modules.Databases.ElastiCache.elasticache_metrics",
        "description": "modules.Databases.ElastiCache.elasticache_metrics",
        "peekOfCode": "def elasticache_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('elasticache', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account.get('account_name', '')).replace(\" \", \"_\")\n    while True:\n        try:\n            clusters_idx = 0\n            inventory = []",
        "detail": "modules.Databases.ElastiCache.elasticache_metrics",
        "documentation": {}
    },
    {
        "label": "list_memorydb",
        "kind": 2,
        "importPath": "modules.Databases.MemoryDB.memorydb",
        "description": "modules.Databases.MemoryDB.memorydb",
        "peekOfCode": "def list_memorydb(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('memorydb', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_clusters(",
        "detail": "modules.Databases.MemoryDB.memorydb",
        "documentation": {}
    },
    {
        "label": "list_neptune",
        "kind": 2,
        "importPath": "modules.Databases.Neptune.neptune",
        "description": "modules.Databases.Neptune.neptune",
        "peekOfCode": "def list_neptune(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('neptune', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_db_clusters(",
        "detail": "modules.Databases.Neptune.neptune",
        "documentation": {}
    },
    {
        "label": "list_neptune_instances",
        "kind": 2,
        "importPath": "modules.Databases.Neptune.neptune",
        "description": "modules.Databases.Neptune.neptune",
        "peekOfCode": "def list_neptune_instances(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('neptune', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_db_instances(",
        "detail": "modules.Databases.Neptune.neptune",
        "documentation": {}
    },
    {
        "label": "list_rds",
        "kind": 2,
        "importPath": "modules.Databases.RDS.rds",
        "description": "modules.Databases.RDS.rds",
        "peekOfCode": "def list_rds(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function lists RDS clusters and saves the information in a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_rds` function is the path where the output\n    file will be saved. It is the location on the file system where the Parquet file containing the RDS\n    inventory data will be stored\n    :param session: The `session` parameter in the `list_rds` function is an AWS session object that is\n    used to create a client for interacting with the AWS RDS service in a specific region\n    :param region: The `region` parameter in the `list_rds` function is used to specify the AWS region\n    in which the RDS (Relational Database Service) resources are located. This parameter is required to",
        "detail": "modules.Databases.RDS.rds",
        "documentation": {}
    },
    {
        "label": "list_rds_global",
        "kind": 2,
        "importPath": "modules.Databases.RDS.rds",
        "description": "modules.Databases.RDS.rds",
        "peekOfCode": "def list_rds_global(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function lists RDS clusters and saves the information in a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_rds` function is the path where the output\n    file will be saved. It is the location on the file system where the Parquet file containing the RDS\n    inventory data will be stored\n    :param session: The `session` parameter in the `list_rds` function is an AWS session object that is\n    used to create a client for interacting with the AWS RDS service in a specific region\n    :param region: The `region` parameter in the `list_rds` function is used to specify the AWS region\n    in which the RDS (Relational Database Service) resources are located. This parameter is required to",
        "detail": "modules.Databases.RDS.rds",
        "documentation": {}
    },
    {
        "label": "list_rds_instances",
        "kind": 2,
        "importPath": "modules.Databases.RDS.rds",
        "description": "modules.Databases.RDS.rds",
        "peekOfCode": "def list_rds_instances(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('rds', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_db_instances(",
        "detail": "modules.Databases.RDS.rds",
        "documentation": {}
    },
    {
        "label": "list_rds_snapshots",
        "kind": 2,
        "importPath": "modules.Databases.RDS.rds",
        "description": "modules.Databases.RDS.rds",
        "peekOfCode": "def list_rds_snapshots(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('rds', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_db_cluster_snapshots(",
        "detail": "modules.Databases.RDS.rds",
        "documentation": {}
    },
    {
        "label": "list_rds_proxies",
        "kind": 2,
        "importPath": "modules.Databases.RDS.rds",
        "description": "modules.Databases.RDS.rds",
        "peekOfCode": "def list_rds_proxies(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('rds', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_db_proxies(",
        "detail": "modules.Databases.RDS.rds",
        "documentation": {}
    },
    {
        "label": "list_rds_proxy_endpoints",
        "kind": 2,
        "importPath": "modules.Databases.RDS.rds",
        "description": "modules.Databases.RDS.rds",
        "peekOfCode": "def list_rds_proxy_endpoints(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('rds', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_db_proxy_endpoints(",
        "detail": "modules.Databases.RDS.rds",
        "documentation": {}
    },
    {
        "label": "rds_instances_metrics",
        "kind": 2,
        "importPath": "modules.Databases.RDS.rds_metrics",
        "description": "modules.Databases.RDS.rds_metrics",
        "peekOfCode": "def rds_instances_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('rds', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.describe_db_instances(\n                Marker=next_token) if next_token else client.describe_db_instances()",
        "detail": "modules.Databases.RDS.rds_metrics",
        "documentation": {}
    },
    {
        "label": "rds_proxies_metrics",
        "kind": 2,
        "importPath": "modules.Databases.RDS.rds_metrics",
        "description": "modules.Databases.RDS.rds_metrics",
        "peekOfCode": "def rds_proxies_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('rds', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.describe_db_proxies(\n                Marker=next_token) if next_token else client.describe_db_proxies()",
        "detail": "modules.Databases.RDS.rds_metrics",
        "documentation": {}
    },
    {
        "label": "list_redshift",
        "kind": 2,
        "importPath": "modules.Databases.Redshift.redshift",
        "description": "modules.Databases.Redshift.redshift",
        "peekOfCode": "def list_redshift(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_redshift` retrieves information about Redshift clusters, formats the data, and\n    saves it as Parquet files.\n    :param file_path: The `file_path` parameter in the `list_redshift` function is the path where the\n    output file will be saved. It is the location on the file system where the Parquet file containing\n    the Redshift cluster inventory will be stored\n    :param session: The `session` parameter in the `list_redshift` function is an AWS session object\n    that is used to create a client for interacting with the Amazon Redshift service. It is typically\n    created using the `boto3.Session` class and contains the necessary credentials and configuration to",
        "detail": "modules.Databases.Redshift.redshift",
        "documentation": {}
    },
    {
        "label": "list_redshift_serverless",
        "kind": 2,
        "importPath": "modules.Databases.Redshift.redshift",
        "description": "modules.Databases.Redshift.redshift",
        "peekOfCode": "def list_redshift_serverless(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('redshift-serverless', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_workgroups(",
        "detail": "modules.Databases.Redshift.redshift",
        "documentation": {}
    },
    {
        "label": "list_elasticsearch_domains",
        "kind": 2,
        "importPath": "modules.MachineLearning.ElasticSearch.elasticsearch",
        "description": "modules.MachineLearning.ElasticSearch.elasticsearch",
        "peekOfCode": "def list_elasticsearch_domains(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('es', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    inventory = []\n    names = []\n    response = client.list_domain_names()\n    for resource in response.get('DomainNames', []):",
        "detail": "modules.MachineLearning.ElasticSearch.elasticsearch",
        "documentation": {}
    },
    {
        "label": "networkfirewall_metrics",
        "kind": 2,
        "importPath": "modules.MachineLearning.ElasticSearch.elasticsearch_metrics",
        "description": "modules.MachineLearning.ElasticSearch.elasticsearch_metrics",
        "peekOfCode": "def networkfirewall_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('network-firewall', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            gw_idx = 0\n            inventory = []\n            addons = {\"type\": \"opensearch\"}",
        "detail": "modules.MachineLearning.ElasticSearch.elasticsearch_metrics",
        "documentation": {}
    },
    {
        "label": "list_opensearch_domains",
        "kind": 2,
        "importPath": "modules.MachineLearning.OpenSearch.opensearch",
        "description": "modules.MachineLearning.OpenSearch.opensearch",
        "peekOfCode": "def list_opensearch_domains(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('opensearch', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    inventory = []\n    names = []\n    response = client.list_domain_names()\n    for resource in response.get('DomainNames', []):",
        "detail": "modules.MachineLearning.OpenSearch.opensearch",
        "documentation": {}
    },
    {
        "label": "list_opensearch_nodes",
        "kind": 2,
        "importPath": "modules.MachineLearning.OpenSearch.opensearch",
        "description": "modules.MachineLearning.OpenSearch.opensearch",
        "peekOfCode": "def list_opensearch_nodes(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('opensearch', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    inventory = []\n    names = []\n    response = client.list_domain_names()\n    for resource in response.get('DomainNames', []):",
        "detail": "modules.MachineLearning.OpenSearch.opensearch",
        "documentation": {}
    },
    {
        "label": "opensearch_metrics",
        "kind": 2,
        "importPath": "modules.MachineLearning.OpenSearch.opensearch_metrics",
        "description": "modules.MachineLearning.OpenSearch.opensearch_metrics",
        "peekOfCode": "def opensearch_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('opensearch', region_name=region)\n    account_id = account['account_id']\n    response = client.list_domain_names()\n    names = []\n    for resource in response.get('DomainNames', []):\n        names.append(resource['DomainName'])\n    while True:",
        "detail": "modules.MachineLearning.OpenSearch.opensearch_metrics",
        "documentation": {}
    },
    {
        "label": "list_rekognition",
        "kind": 2,
        "importPath": "modules.MachineLearning.Rekognition.rekognition",
        "description": "modules.MachineLearning.Rekognition.rekognition",
        "peekOfCode": "def list_rekognition(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function lists Rekognition collections and saves the information in a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_rekognition` function is the path where the\n    inventory data will be saved as a file. It should be a string representing the file path where the\n    inventory data will be stored\n    :param session: The `session` parameter in the `list_rekognition` function is typically an instance\n    of a boto3 session that allows you to create service clients for AWS services. It is used to create\n    a client for the Amazon Rekognition service in the specified region\n    :param region: The `region` parameter in the `list_rekognition` function refers to the AWS region",
        "detail": "modules.MachineLearning.Rekognition.rekognition",
        "documentation": {}
    },
    {
        "label": "list_sagemaker",
        "kind": 2,
        "importPath": "modules.MachineLearning.SageMaker.sagemaker",
        "description": "modules.MachineLearning.SageMaker.sagemaker",
        "peekOfCode": "def list_sagemaker(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function lists SageMaker clusters, extracts common information, and saves the data as\n    Parquet files.\n    :param file_path: The `file_path` parameter in the `list_sagemaker` function is the path where the\n    inventory data will be saved as a file. It is the location where the Parquet file containing the\n    extracted information about SageMaker clusters will be stored\n    :param session: The `session` parameter in the `list_sagemaker` function is an object representing\n    the current session. It is typically created using the `boto3.Session` class and is used to create\n    clients and resources for AWS services",
        "detail": "modules.MachineLearning.SageMaker.sagemaker",
        "documentation": {}
    },
    {
        "label": "list_sagemaker_domain",
        "kind": 2,
        "importPath": "modules.MachineLearning.SageMaker.sagemaker",
        "description": "modules.MachineLearning.SageMaker.sagemaker",
        "peekOfCode": "def list_sagemaker_domain(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function lists SageMaker domains, extracts common information, and saves the data as\n    Parquet files.\n    :param file_path: The `file_path` parameter in the `list_sagemaker_domain` function is the path\n    where the output file will be saved. It should be a string representing the file path where the\n    inventory data will be stored\n    :param session: The `session` parameter in the `list_sagemaker_domain` function is typically an\n    instance of a boto3 session that is used to create a client for interacting with AWS services. It\n    allows you to configure credentials, region, and other settings for making API calls to AWS services",
        "detail": "modules.MachineLearning.SageMaker.sagemaker",
        "documentation": {}
    },
    {
        "label": "list_wisdom",
        "kind": 2,
        "importPath": "modules.MachineLearning.Wisdom.wisdom",
        "description": "modules.MachineLearning.Wisdom.wisdom",
        "peekOfCode": "def list_wisdom(file_path, session, region, time_generated, account):\n    \"\"\"\n    This function retrieves a list of knowledge bases using the AWS Wisdom service and saves the\n    information to a Parquet file.\n    :param file_path: The `file_path` parameter is the path where the output file will be saved. It\n    should be a string representing the file path including the file name and extension where the data\n    will be stored\n    :param session: The `session` parameter is typically an instance of a boto3 session that allows you\n    to create service clients for AWS services. It is used to interact with the AWS services in your\n    Python code",
        "detail": "modules.MachineLearning.Wisdom.wisdom",
        "documentation": {}
    },
    {
        "label": "list_accessanalyzer",
        "kind": 2,
        "importPath": "modules.Management.accessanalyzer.accessanalyzer",
        "description": "modules.Management.accessanalyzer.accessanalyzer",
        "peekOfCode": "def list_accessanalyzer(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_accessanalyzer` retrieves and processes data from AWS Access Analyzer analyzers\n    and saves it to a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_accessanalyzer` function is the path where\n    the output file will be saved. It is the location on the file system where the Parquet file\n    containing the inventory data will be stored\n    :param session: The `session` parameter in the `list_accessanalyzer` function is typically an AWS\n    session object that is used to create clients for AWS services. It is used to interact with the AWS\n    Access Analyzer service in the specified region",
        "detail": "modules.Management.accessanalyzer.accessanalyzer",
        "documentation": {}
    },
    {
        "label": "complete_aws_account",
        "kind": 2,
        "importPath": "modules.Management.account.account",
        "description": "modules.Management.account.account",
        "peekOfCode": "def complete_aws_account(account):\n    \"\"\"\n    The function `complete_aws_account` takes an AWS account dictionary and returns a new dictionary\n    with default values for missing keys.\n    :param account: The `complete_aws_account` function takes an `account` dictionary as input and\n    returns a new dictionary with the following keys:\n    :return: The function `complete_aws_account` is returning a dictionary with the keys 'account_id',\n    'account_role', and 'account_name'. The values for 'account_id' are taken from the input `account`\n    dictionary, while the values for 'account_role' default to 'Cloudteam-FinOps' if not present in the\n    input `account` dictionary. The value for 'account_name'",
        "detail": "modules.Management.account.account",
        "documentation": {}
    },
    {
        "label": "regions_enabled",
        "kind": 2,
        "importPath": "modules.Management.account.account",
        "description": "modules.Management.account.account",
        "peekOfCode": "def regions_enabled(session):\n    \"\"\"\n    The function `regions_enabled` returns a list of AWS regions that are enabled for a given session.\n    :param session: It looks like the `regions_enabled` function is designed to return a list of AWS\n    regions that are enabled for a given session. The function seems to be hardcoding a list of AWS\n    regions that are enabled\n    :return: The function `regions_enabled(session)` returns a list of AWS regions that are enabled for\n    the given session.\n    \"\"\"\n    default_regions = ['us-east-2',",
        "detail": "modules.Management.account.account",
        "documentation": {}
    },
    {
        "label": "get_credentials_assume_role",
        "kind": 2,
        "importPath": "modules.Management.account.account",
        "description": "modules.Management.account.account",
        "peekOfCode": "def get_credentials_assume_role(account_id, role_name=\"Cloudteam-FinOps\", region='us-east-1', external_id=None):\n    \"\"\"\n    The function `get_credentials_assume_role` assumes an AWS IAM role in a specified account and\n    returns the temporary credentials.\n    :param account_id: The `account_id` parameter is the unique identifier for the AWS account for which\n    you want to assume a role. It is used to construct the ARN (Amazon Resource Name) of the role that\n    you want to assume within that account\n    :param role_name: The `role_name` parameter in the `get_credentials_assume_role` function is a\n    string that represents the name of the IAM role that you want to assume in the AWS account specified\n    by `account_id`. By default, the `role_name` is set to \"Cloudteam-FinOps\", defaults to",
        "detail": "modules.Management.account.account",
        "documentation": {}
    },
    {
        "label": "get_aws_session",
        "kind": 2,
        "importPath": "modules.Management.account.account",
        "description": "modules.Management.account.account",
        "peekOfCode": "def get_aws_session(account_id, region='us-east-1', role_name=\"Cloudteam-FinOps\"):\n    \"\"\"\n    This function uses the `get_credentials_assume_role` function to get temporary credentials for the specified role, and\n    then uses those credentials to create a new `boto3` session\n    :param account_id: The AWS account ID of the account you want to assume a role in\n    :param role_name: The name of the role you want to assume\n    :param external_id: the external id from CloudHiro\n    :return: A session object that can be used to make API calls to the account specified in the role_name parameter.\n        external_id:\n    \"\"\"",
        "detail": "modules.Management.account.account",
        "documentation": {}
    },
    {
        "label": "list_accounts",
        "kind": 2,
        "importPath": "modules.Management.accounts.accounts",
        "description": "modules.Management.accounts.accounts",
        "peekOfCode": "def list_accounts(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_accounts` retrieves account information from AWS Organizations, processes it, and\n    saves it as a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_accounts` function is the path where the\n    output file will be saved. It should be a string representing the file path where you want to save\n    the output data. For example, it could be something like \"/path/to/output/file.parquet\"\n    :param session: The `session` parameter in the `list_accounts` function is typically an instance of\n    the `boto3.Session` class, which is used to create service clients for AWS services. It allows you\n    to make API requests to AWS services using the credentials and configuration provided",
        "detail": "modules.Management.accounts.accounts",
        "documentation": {}
    },
    {
        "label": "list_cloudformation",
        "kind": 2,
        "importPath": "modules.Management.cloudformation.cloudformation",
        "description": "modules.Management.cloudformation.cloudformation",
        "peekOfCode": "def list_cloudformation(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('cloudformation', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_stacks(",
        "detail": "modules.Management.cloudformation.cloudformation",
        "documentation": {}
    },
    {
        "label": "list_logs_groups",
        "kind": 2,
        "importPath": "modules.Management.logs.logs",
        "description": "modules.Management.logs.logs",
        "peekOfCode": "def list_logs_groups(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('logs', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_log_groups(",
        "detail": "modules.Management.logs.logs",
        "documentation": {}
    },
    {
        "label": "list_firehose",
        "kind": 2,
        "importPath": "modules.Messaging.Firehose.firehose",
        "description": "modules.Messaging.Firehose.firehose",
        "peekOfCode": "def list_firehose(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('firehose', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    streams = []\n    while True:\n        try:\n            inventory = []",
        "detail": "modules.Messaging.Firehose.firehose",
        "documentation": {}
    },
    {
        "label": "firehose_metrics",
        "kind": 2,
        "importPath": "modules.Messaging.Firehose.firehose_metrics",
        "description": "modules.Messaging.Firehose.firehose_metrics",
        "peekOfCode": "def firehose_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('firehose', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.list_delivery_streams(\n                ExclusiveStartDeliveryStreamName=next_token) if next_token else client.list_delivery_streams()",
        "detail": "modules.Messaging.Firehose.firehose_metrics",
        "documentation": {}
    },
    {
        "label": "list_msk",
        "kind": 2,
        "importPath": "modules.Messaging.Kafka.kafka",
        "description": "modules.Messaging.Kafka.kafka",
        "peekOfCode": "def list_msk(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('kafka', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_clusters_v2(",
        "detail": "modules.Messaging.Kafka.kafka",
        "documentation": {}
    },
    {
        "label": "list_msk_nodes",
        "kind": 2,
        "importPath": "modules.Messaging.Kafka.kafka",
        "description": "modules.Messaging.Kafka.kafka",
        "peekOfCode": "def list_msk_nodes(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('kafka', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            clusters_inventory = []\n            response = client.list_clusters_v2(",
        "detail": "modules.Messaging.Kafka.kafka",
        "documentation": {}
    },
    {
        "label": "msk_nodes_metrics",
        "kind": 2,
        "importPath": "modules.Messaging.Kafka.kafka_metrics",
        "description": "modules.Messaging.Kafka.kafka_metrics",
        "peekOfCode": "def msk_nodes_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('kafka', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            clusters_inventory = []\n            response = client.list_clusters_v2(\n                NextToken=next_token) if next_token else client.list_clusters_v2()",
        "detail": "modules.Messaging.Kafka.kafka_metrics",
        "documentation": {}
    },
    {
        "label": "list_kinesis",
        "kind": 2,
        "importPath": "modules.Messaging.Kinesis.kinesis",
        "description": "modules.Messaging.Kinesis.kinesis",
        "peekOfCode": "def list_kinesis(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('kinesis', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_streams(",
        "detail": "modules.Messaging.Kinesis.kinesis",
        "documentation": {}
    },
    {
        "label": "kinesis_metrics",
        "kind": 2,
        "importPath": "modules.Messaging.Kinesis.kinesis_metrics",
        "description": "modules.Messaging.Kinesis.kinesis_metrics",
        "peekOfCode": "def kinesis_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('kinesis', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.list_streams(\n                NextToken=next_token) if next_token else client.list_streams()",
        "detail": "modules.Messaging.Kinesis.kinesis_metrics",
        "documentation": {}
    },
    {
        "label": "list_mq",
        "kind": 2,
        "importPath": "modules.Messaging.MQ.mq",
        "description": "modules.Messaging.MQ.mq",
        "peekOfCode": "def list_mq(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('mq', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_brokers(",
        "detail": "modules.Messaging.MQ.mq",
        "documentation": {}
    },
    {
        "label": "mq_metrics",
        "kind": 2,
        "importPath": "modules.Messaging.MQ.mq_metrics",
        "description": "modules.Messaging.MQ.mq_metrics",
        "peekOfCode": "def mq_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('mq', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.list_brokers(\n                NextToken=next_token) if next_token else client.list_brokers()",
        "detail": "modules.Messaging.MQ.mq_metrics",
        "documentation": {}
    },
    {
        "label": "list_sns",
        "kind": 2,
        "importPath": "modules.Messaging.SNS.sns",
        "description": "modules.Messaging.SNS.sns",
        "peekOfCode": "def list_sns(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('sns', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_topics(",
        "detail": "modules.Messaging.SNS.sns",
        "documentation": {}
    },
    {
        "label": "list_sns_subscriptions",
        "kind": 2,
        "importPath": "modules.Messaging.SNS.sns",
        "description": "modules.Messaging.SNS.sns",
        "peekOfCode": "def list_sns_subscriptions(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('sns', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_subscriptions(",
        "detail": "modules.Messaging.SNS.sns",
        "documentation": {}
    },
    {
        "label": "sns_metrics",
        "kind": 2,
        "importPath": "modules.Messaging.SNS.sns_metrics",
        "description": "modules.Messaging.SNS.sns_metrics",
        "peekOfCode": "def sns_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    account_id = account['account_id']\n    while True:\n        try:\n            client = session.client('sns', region_name=region)\n            inventory = []\n            response = client.list_topics(\n                NextToken=next_token) if next_token else client.list_topics()",
        "detail": "modules.Messaging.SNS.sns_metrics",
        "documentation": {}
    },
    {
        "label": "list_sqs",
        "kind": 2,
        "importPath": "modules.Messaging.SQS.sqs",
        "description": "modules.Messaging.SQS.sqs",
        "peekOfCode": "def list_sqs(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('sqs', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_queues(",
        "detail": "modules.Messaging.SQS.sqs",
        "documentation": {}
    },
    {
        "label": "sqs_metrics",
        "kind": 2,
        "importPath": "modules.Messaging.SQS.sqs_metrics",
        "description": "modules.Messaging.SQS.sqs_metrics",
        "peekOfCode": "def sqs_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    account_id = account['account_id']\n    while True:\n        try:\n            client = session.client('sqs', region_name=region)\n            inventory = []\n            response = client.list_queues(\n                NextToken=next_token) if next_token else client.list_queues()",
        "detail": "modules.Messaging.SQS.sqs_metrics",
        "documentation": {}
    },
    {
        "label": "list_amp",
        "kind": 2,
        "importPath": "modules.Monitoring.AMP.amp",
        "description": "modules.Monitoring.AMP.amp",
        "peekOfCode": "def list_amp(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('amp', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_workspaces(",
        "detail": "modules.Monitoring.AMP.amp",
        "documentation": {}
    },
    {
        "label": "list_application_insights",
        "kind": 2,
        "importPath": "modules.Monitoring.ApplicationInsights.application_insights",
        "description": "modules.Monitoring.ApplicationInsights.application_insights",
        "peekOfCode": "def list_application_insights(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('application-insights', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_applications()",
        "detail": "modules.Monitoring.ApplicationInsights.application_insights",
        "documentation": {}
    },
    {
        "label": "list_xray",
        "kind": 2,
        "importPath": "modules.Monitoring.XRay.xray",
        "description": "modules.Monitoring.XRay.xray",
        "peekOfCode": "def list_xray(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('xray', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    end_time = datetime.utcnow()\n    start_time = end_time - timedelta(hours=24)\n    while True:\n        try:",
        "detail": "modules.Monitoring.XRay.xray",
        "documentation": {}
    },
    {
        "label": "list_acl",
        "kind": 2,
        "importPath": "modules.Networking.ACL.acl",
        "description": "modules.Networking.ACL.acl",
        "peekOfCode": "def list_acl(file_path, session, region, time_generated, account):\n    \"\"\"\n    The `list_acl` function retrieves and saves information about network ACLs in AWS using the provided\n    parameters.\n    :param file_path: The `file_path` parameter in the `list_acl` function is the path where the output\n    files will be saved. It should be a string representing the directory or file path where the\n    generated output files will be stored\n    :param session: The `session` parameter in the `list_acl` function is an AWS session object that is\n    used to create a client for the EC2 service in a specific region. It is typically created using the\n    `boto3.Session` class and is used to make API calls to AWS services",
        "detail": "modules.Networking.ACL.acl",
        "documentation": {}
    },
    {
        "label": "list_arc_zonal_shift",
        "kind": 2,
        "importPath": "modules.Networking.Arc_Zonal_Shift.arc_zonal_shift",
        "description": "modules.Networking.Arc_Zonal_Shift.arc_zonal_shift",
        "peekOfCode": "def list_arc_zonal_shift(file_path, session, region, time_generated, account):\n    \"\"\"\n    The function `list_arc_zonal_shift` retrieves and processes inventory data related to arc and zonal\n    shifts for a specified account in a given region.\n    :param file_path: The `file_path` parameter in the `list_arc_zonal_shift` function is the path where\n    the output file will be saved. It should be a string representing the file path where the function\n    will save the results of the operation\n    :param session: The `session` parameter in the `list_arc_zonal_shift` function is typically an\n    instance of a session object that allows you to interact with AWS services. It is used to create a\n    client for the `arc-zonal-shift` service in the specified region",
        "detail": "modules.Networking.Arc_Zonal_Shift.arc_zonal_shift",
        "documentation": {}
    },
    {
        "label": "list_clientvpn",
        "kind": 2,
        "importPath": "modules.Networking.ClientVPN.clientvpn",
        "description": "modules.Networking.ClientVPN.clientvpn",
        "peekOfCode": "def list_clientvpn(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_client_vpn_endpoints(",
        "detail": "modules.Networking.ClientVPN.clientvpn",
        "documentation": {}
    },
    {
        "label": "clientvpn_metrics",
        "kind": 2,
        "importPath": "modules.Networking.ClientVPN.clientvpn_metrics",
        "description": "modules.Networking.ClientVPN.clientvpn_metrics",
        "peekOfCode": "def clientvpn_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.describe_client_vpn_endpoints(\n                NextToken=next_token) if next_token else client.describe_client_vpn_endpoints()",
        "detail": "modules.Networking.ClientVPN.clientvpn_metrics",
        "documentation": {}
    },
    {
        "label": "list_cloudfront",
        "kind": 2,
        "importPath": "modules.Networking.CloudFront.cloudfront",
        "description": "modules.Networking.CloudFront.cloudfront",
        "peekOfCode": "def list_cloudfront(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('cloudfront', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_distributions(",
        "detail": "modules.Networking.CloudFront.cloudfront",
        "documentation": {}
    },
    {
        "label": "cloudfront_metrics",
        "kind": 2,
        "importPath": "modules.Networking.CloudFront.cloudfront_metrics",
        "description": "modules.Networking.CloudFront.cloudfront_metrics",
        "peekOfCode": "def cloudfront_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('cloudfront', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.list_distributions(\n                Marker=next_token) if next_token else client.list_distributions()",
        "detail": "modules.Networking.CloudFront.cloudfront_metrics",
        "documentation": {}
    },
    {
        "label": "list_eip",
        "kind": 2,
        "importPath": "modules.Networking.EIP.eip",
        "description": "modules.Networking.EIP.eip",
        "peekOfCode": "def list_eip(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_addresses()",
        "detail": "modules.Networking.EIP.eip",
        "documentation": {}
    },
    {
        "label": "list_elb",
        "kind": 2,
        "importPath": "modules.Networking.ELB.elb",
        "description": "modules.Networking.ELB.elb",
        "peekOfCode": "def list_elb(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('elb', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_load_balancers(",
        "detail": "modules.Networking.ELB.elb",
        "documentation": {}
    },
    {
        "label": "list_elbv2",
        "kind": 2,
        "importPath": "modules.Networking.ELB.elb",
        "description": "modules.Networking.ELB.elb",
        "peekOfCode": "def list_elbv2(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('elbv2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_load_balancers(",
        "detail": "modules.Networking.ELB.elb",
        "documentation": {}
    },
    {
        "label": "elb_metrics",
        "kind": 2,
        "importPath": "modules.Networking.ELB.elb_metrics",
        "description": "modules.Networking.ELB.elb_metrics",
        "peekOfCode": "def elb_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('elb', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.describe_load_balancers(\n                Marker=next_token) if next_token else client.describe_load_balancers()",
        "detail": "modules.Networking.ELB.elb_metrics",
        "documentation": {}
    },
    {
        "label": "elbv2_network_metrics",
        "kind": 2,
        "importPath": "modules.Networking.ELB.elb_metrics",
        "description": "modules.Networking.ELB.elb_metrics",
        "peekOfCode": "def elbv2_network_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('elbv2', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.describe_load_balancers(\n                Marker=next_token) if next_token else client.describe_load_balancers()",
        "detail": "modules.Networking.ELB.elb_metrics",
        "documentation": {}
    },
    {
        "label": "elbv2_application_metrics",
        "kind": 2,
        "importPath": "modules.Networking.ELB.elb_metrics",
        "description": "modules.Networking.ELB.elb_metrics",
        "peekOfCode": "def elbv2_application_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    account_id = account['account_id']\n    while True:\n        try:\n            gw_idx = 0\n            client = session.client('elbv2', region_name=region)\n            inventory = []\n            addons = {\"type\": \"elbv2-application\"}",
        "detail": "modules.Networking.ELB.elb_metrics",
        "documentation": {}
    },
    {
        "label": "elbv2_gateway_metrics",
        "kind": 2,
        "importPath": "modules.Networking.ELB.elb_metrics",
        "description": "modules.Networking.ELB.elb_metrics",
        "peekOfCode": "def elbv2_gateway_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('elbv2', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.describe_load_balancers(\n                Marker=next_token) if next_token else client.describe_load_balancers()",
        "detail": "modules.Networking.ELB.elb_metrics",
        "documentation": {}
    },
    {
        "label": "list_eni",
        "kind": 2,
        "importPath": "modules.Networking.ENI.eni",
        "description": "modules.Networking.ENI.eni",
        "peekOfCode": "def list_eni(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_network_interfaces(",
        "detail": "modules.Networking.ENI.eni",
        "documentation": {}
    },
    {
        "label": "list_globalaccelerator",
        "kind": 2,
        "importPath": "modules.Networking.GlobalAccelerators.globalaccelerator",
        "description": "modules.Networking.GlobalAccelerators.globalaccelerator",
        "peekOfCode": "def list_globalaccelerator(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    region = 'us-west-2'\n    client = session.client('globalaccelerator', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []",
        "detail": "modules.Networking.GlobalAccelerators.globalaccelerator",
        "documentation": {}
    },
    {
        "label": "list_internetgateway",
        "kind": 2,
        "importPath": "modules.Networking.InternetGateway.internetgateway",
        "description": "modules.Networking.InternetGateway.internetgateway",
        "peekOfCode": "def list_internetgateway(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_internet_gateways(",
        "detail": "modules.Networking.InternetGateway.internetgateway",
        "documentation": {}
    },
    {
        "label": "list_natgateway",
        "kind": 2,
        "importPath": "modules.Networking.NATGateway.natgateway",
        "description": "modules.Networking.NATGateway.natgateway",
        "peekOfCode": "def list_natgateway(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_nat_gateways(",
        "detail": "modules.Networking.NATGateway.natgateway",
        "documentation": {}
    },
    {
        "label": "natgateway_metrics",
        "kind": 2,
        "importPath": "modules.Networking.NATGateway.natgateway_metrics",
        "description": "modules.Networking.NATGateway.natgateway_metrics",
        "peekOfCode": "def natgateway_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.describe_nat_gateways(\n                Marker=next_token) if next_token else client.describe_nat_gateways()",
        "detail": "modules.Networking.NATGateway.natgateway_metrics",
        "documentation": {}
    },
    {
        "label": "list_networkfirewall",
        "kind": 2,
        "importPath": "modules.Networking.NetworkFirewall.networkfirewall",
        "description": "modules.Networking.NetworkFirewall.networkfirewall",
        "peekOfCode": "def list_networkfirewall(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('network-firewall', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_firewalls(",
        "detail": "modules.Networking.NetworkFirewall.networkfirewall",
        "documentation": {}
    },
    {
        "label": "networkfirewall_metrics",
        "kind": 2,
        "importPath": "modules.Networking.NetworkFirewall.networkfirewall_metrics",
        "description": "modules.Networking.NetworkFirewall.networkfirewall_metrics",
        "peekOfCode": "def networkfirewall_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('network-firewall', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            gw_idx = 0\n            inventory = []\n            addons = {\"type\": \"networkfirewall\"}",
        "detail": "modules.Networking.NetworkFirewall.networkfirewall_metrics",
        "documentation": {}
    },
    {
        "label": "list_route53",
        "kind": 2,
        "importPath": "modules.Networking.Route53.route53",
        "description": "modules.Networking.Route53.route53",
        "peekOfCode": "def list_route53(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('route53', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_hosted_zones(",
        "detail": "modules.Networking.Route53.route53",
        "documentation": {}
    },
    {
        "label": "list_route53_resolver",
        "kind": 2,
        "importPath": "modules.Networking.Route53.route53",
        "description": "modules.Networking.Route53.route53",
        "peekOfCode": "def list_route53_resolver(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('route53resolver', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_resolver_endpoints(",
        "detail": "modules.Networking.Route53.route53",
        "documentation": {}
    },
    {
        "label": "route53_metrics",
        "kind": 2,
        "importPath": "modules.Networking.Route53.route53_metrics",
        "description": "modules.Networking.Route53.route53_metrics",
        "peekOfCode": "def route53_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('route53', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.list_hosted_zones(\n                Marker=next_token) if next_token else client.list_hosted_zones()",
        "detail": "modules.Networking.Route53.route53_metrics",
        "documentation": {}
    },
    {
        "label": "route53_resolver_metrics",
        "kind": 2,
        "importPath": "modules.Networking.Route53.route53_metrics",
        "description": "modules.Networking.Route53.route53_metrics",
        "peekOfCode": "def route53_resolver_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('route53resolver', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.list_resolver_endpoints(\n                NextToken=next_token) if next_token else client.list_resolver_endpoints()",
        "detail": "modules.Networking.Route53.route53_metrics",
        "documentation": {}
    },
    {
        "label": "list_routetable",
        "kind": 2,
        "importPath": "modules.Networking.RouteTable.routetable",
        "description": "modules.Networking.RouteTable.routetable",
        "peekOfCode": "def list_routetable(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_route_tables(",
        "detail": "modules.Networking.RouteTable.routetable",
        "documentation": {}
    },
    {
        "label": "list_transitgateway",
        "kind": 2,
        "importPath": "modules.Networking.TransitGateway.transitgateway",
        "description": "modules.Networking.TransitGateway.transitgateway",
        "peekOfCode": "def list_transitgateway(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_transit_gateways(",
        "detail": "modules.Networking.TransitGateway.transitgateway",
        "documentation": {}
    },
    {
        "label": "list_transitgateway_attachments",
        "kind": 2,
        "importPath": "modules.Networking.TransitGateway.transitgateway",
        "description": "modules.Networking.TransitGateway.transitgateway",
        "peekOfCode": "def list_transitgateway_attachments(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_transit_gateway_attachments(",
        "detail": "modules.Networking.TransitGateway.transitgateway",
        "documentation": {}
    },
    {
        "label": "transitgateway_metrics",
        "kind": 2,
        "importPath": "modules.Networking.TransitGateway.transitgateway_metrics",
        "description": "modules.Networking.TransitGateway.transitgateway_metrics",
        "peekOfCode": "def transitgateway_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    account_id = account['account_id']\n    while True:\n        try:\n            client = session.client('ec2', region_name=region)\n            inventory = []\n            response = client.describe_transit_gateways(\n                NextToken=next_token) if next_token else client.describe_transit_gateways()",
        "detail": "modules.Networking.TransitGateway.transitgateway_metrics",
        "documentation": {}
    },
    {
        "label": "transitgateway_attachments_metrics",
        "kind": 2,
        "importPath": "modules.Networking.TransitGateway.transitgateway_metrics",
        "description": "modules.Networking.TransitGateway.transitgateway_metrics",
        "peekOfCode": "def transitgateway_attachments_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    account_id = account['account_id']\n    while True:\n        try:\n            gw_idx = 0\n            client = session.client('ec2', region_name=region)\n            inventory = []\n            addons = {\"type\": \"transitgateway\"}",
        "detail": "modules.Networking.TransitGateway.transitgateway_metrics",
        "documentation": {}
    },
    {
        "label": "list_vpc",
        "kind": 2,
        "importPath": "modules.Networking.VPC.vpc",
        "description": "modules.Networking.VPC.vpc",
        "peekOfCode": "def list_vpc(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_vpcs(",
        "detail": "modules.Networking.VPC.vpc",
        "documentation": {}
    },
    {
        "label": "list_vpc_endpoint",
        "kind": 2,
        "importPath": "modules.Networking.VPC.vpc",
        "description": "modules.Networking.VPC.vpc",
        "peekOfCode": "def list_vpc_endpoint(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_vpc_endpoints(",
        "detail": "modules.Networking.VPC.vpc",
        "documentation": {}
    },
    {
        "label": "list_vpc_peering",
        "kind": 2,
        "importPath": "modules.Networking.VPC.vpc",
        "description": "modules.Networking.VPC.vpc",
        "peekOfCode": "def list_vpc_peering(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_vpc_peering_connections(",
        "detail": "modules.Networking.VPC.vpc",
        "documentation": {}
    },
    {
        "label": "list_vpclattice",
        "kind": 2,
        "importPath": "modules.Networking.VPC.vpc",
        "description": "modules.Networking.VPC.vpc",
        "peekOfCode": "def list_vpclattice(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('vpc-lattice', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_services(",
        "detail": "modules.Networking.VPC.vpc",
        "documentation": {}
    },
    {
        "label": "vpcendpoint_metrics",
        "kind": 2,
        "importPath": "modules.Networking.VPC.vpc_metrics",
        "description": "modules.Networking.VPC.vpc_metrics",
        "peekOfCode": "def vpcendpoint_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    account_id = account['account_id']\n    while True:\n        try:\n            vpe_idx = 0\n            client = session.client('ec2', region_name=region)\n            inventory = []\n            addons = {\"type\": \"privatelinkendpoints\"}",
        "detail": "modules.Networking.VPC.vpc_metrics",
        "documentation": {}
    },
    {
        "label": "list_alexaforbusiness",
        "kind": 2,
        "importPath": "modules.Other.alexaforbusiness.alexaforbusiness",
        "description": "modules.Other.alexaforbusiness.alexaforbusiness",
        "peekOfCode": "def list_alexaforbusiness(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function lists Alexa for Business skills and saves the information to a Parquet file.\n    :param file_path: The `file_path` parameter in the `list_alexaforbusiness` function is the path\n    where the inventory data will be saved as a Parquet file. It is a string that represents the\n    location where the file will be stored on the file system\n    :param session: The `session` parameter in the `list_alexaforbusiness` function is typically an\n    instance of a boto3 session that is used to create a client for interacting with AWS services. It\n    allows you to configure credentials, region, and other settings for making API calls to AWS services\n    like Alexa for",
        "detail": "modules.Other.alexaforbusiness.alexaforbusiness",
        "documentation": {}
    },
    {
        "label": "list_appflow",
        "kind": 2,
        "importPath": "modules.Other.appflow.appflow",
        "description": "modules.Other.appflow.appflow",
        "peekOfCode": "def list_appflow(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('appflow', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_flows(",
        "detail": "modules.Other.appflow.appflow",
        "documentation": {}
    },
    {
        "label": "list_timestreamwrite",
        "kind": 2,
        "importPath": "modules.Other.timestreamwrite.timestreamwrite",
        "description": "modules.Other.timestreamwrite.timestreamwrite",
        "peekOfCode": "def list_timestreamwrite(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('timestream-write', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_databases(",
        "detail": "modules.Other.timestreamwrite.timestreamwrite",
        "documentation": {}
    },
    {
        "label": "list_translate",
        "kind": 2,
        "importPath": "modules.Other.translate.translate",
        "description": "modules.Other.translate.translate",
        "peekOfCode": "def list_translate(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('translate', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_text_translation_jobs(",
        "detail": "modules.Other.translate.translate",
        "documentation": {}
    },
    {
        "label": "list_voiceid",
        "kind": 2,
        "importPath": "modules.Other.voiceid.voiceid",
        "description": "modules.Other.voiceid.voiceid",
        "peekOfCode": "def list_voiceid(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('voice-id', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_domains(",
        "detail": "modules.Other.voiceid.voiceid",
        "documentation": {}
    },
    {
        "label": "list_acm",
        "kind": 2,
        "importPath": "modules.Security.ACM.acm",
        "description": "modules.Security.ACM.acm",
        "peekOfCode": "def list_acm(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function lists ACM certificates, extracts common information, and saves the data in\n    Parquet format.\n    :param file_path: The `file_path` parameter in the `list_acm` function represents the path where the\n    output data will be saved as a file. It is the location where the Parquet file containing the\n    inventory information will be stored\n    :param session: The `session` parameter in the `list_acm` function is an object that represents the\n    current session with AWS services. It is typically created using the `boto3.Session` class and is\n    used to create clients and resources for interacting with AWS services",
        "detail": "modules.Security.ACM.acm",
        "documentation": {}
    },
    {
        "label": "list_acm_pca",
        "kind": 2,
        "importPath": "modules.Security.ACM_PCA.acm_pca",
        "description": "modules.Security.ACM_PCA.acm_pca",
        "peekOfCode": "def list_acm_pca(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function lists ACM PCA certificate authorities and saves the information to a Parquet\n    file.\n    :param file_path: The `file_path` parameter in the `list_acm_pca` function is the path where the\n    output file will be saved. It should be a string representing the file path where the Parquet file\n    will be stored\n    :param session: The `session` parameter in the `list_acm_pca` function is typically an instance of a\n    boto3 session that is used to create a client for the AWS ACM PCA (Amazon Certificate Manager\n    Private Certificate Authority) service. This session allows you to make API calls to the ACM PCA",
        "detail": "modules.Security.ACM_PCA.acm_pca",
        "documentation": {}
    },
    {
        "label": "list_cloudhsmv2",
        "kind": 2,
        "importPath": "modules.Security.CloudHSM.cloudhsm",
        "description": "modules.Security.CloudHSM.cloudhsm",
        "peekOfCode": "def list_cloudhsmv2(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('cloudhsmv2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_clusters(",
        "detail": "modules.Security.CloudHSM.cloudhsm",
        "documentation": {}
    },
    {
        "label": "cloudhsmv2_metrics",
        "kind": 2,
        "importPath": "modules.Security.CloudHSM.cloudhsm_metrics",
        "description": "modules.Security.CloudHSM.cloudhsm_metrics",
        "peekOfCode": "def cloudhsmv2_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('cloudhsmv2', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            clusters_idx = 0\n            inventory = []\n            addons = {\"type\": \"cloudhsmv2\"}",
        "detail": "modules.Security.CloudHSM.cloudhsm_metrics",
        "documentation": {}
    },
    {
        "label": "list_securitygroup",
        "kind": 2,
        "importPath": "modules.Security.SecurityGroup.securitygroup",
        "description": "modules.Security.SecurityGroup.securitygroup",
        "peekOfCode": "def list_securitygroup(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('ec2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_security_groups(",
        "detail": "modules.Security.SecurityGroup.securitygroup",
        "documentation": {}
    },
    {
        "label": "list_shield",
        "kind": 2,
        "importPath": "modules.Security.Shield.shield",
        "description": "modules.Security.Shield.shield",
        "peekOfCode": "def list_shield(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('shield', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_subscription(",
        "detail": "modules.Security.Shield.shield",
        "documentation": {}
    },
    {
        "label": "list_shield_protections",
        "kind": 2,
        "importPath": "modules.Security.Shield.shield",
        "description": "modules.Security.Shield.shield",
        "peekOfCode": "def list_shield_protections(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('shield', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_protections(",
        "detail": "modules.Security.Shield.shield",
        "documentation": {}
    },
    {
        "label": "list_waf",
        "kind": 2,
        "importPath": "modules.Security.WAF.waf",
        "description": "modules.Security.WAF.waf",
        "peekOfCode": "def list_waf(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('waf', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_web_acls(",
        "detail": "modules.Security.WAF.waf",
        "documentation": {}
    },
    {
        "label": "list_wafv2",
        "kind": 2,
        "importPath": "modules.Security.WAF.waf",
        "description": "modules.Security.WAF.waf",
        "peekOfCode": "def list_wafv2(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('wafv2', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    scopes = ['CLOUDFRONT', 'REGIONAL']\n    for scope in scopes:\n        while True:\n            try:",
        "detail": "modules.Security.WAF.waf",
        "documentation": {}
    },
    {
        "label": "list_wafregional",
        "kind": 2,
        "importPath": "modules.Security.WAF.waf",
        "description": "modules.Security.WAF.waf",
        "peekOfCode": "def list_wafregional(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('wafregional', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_web_acls(",
        "detail": "modules.Security.WAF.waf",
        "documentation": {}
    },
    {
        "label": "list_efs_file_systems",
        "kind": 2,
        "importPath": "modules.Storage.EFS.efs",
        "description": "modules.Storage.EFS.efs",
        "peekOfCode": "def list_efs_file_systems(file_path, session, region, time_generated, account):\n    \"\"\"\n    This Python function lists Elastic File System (EFS) file systems and saves the information in a\n    Parquet file.\n    :param file_path: The `file_path` parameter in the `list_efs_file_systems` function represents the\n    path where the output files will be saved. This is the location where the function will store the\n    information about the Elastic File Systems (EFS) that it retrieves during its execution\n    :param session: The `session` parameter in the `list_efs_file_systems` function is typically an\n    instance of `boto3.Session` that represents your AWS credentials and configuration. It is used to\n    create a client for the Amazon Elastic File System (EFS) service in the specified region",
        "detail": "modules.Storage.EFS.efs",
        "documentation": {}
    },
    {
        "label": "efs_filesystem_metrics",
        "kind": 2,
        "importPath": "modules.Storage.EFS.efs_metrics",
        "description": "modules.Storage.EFS.efs_metrics",
        "peekOfCode": "def efs_filesystem_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('efs', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.describe_file_systems(\n                Marker=next_token) if next_token else client.describe_file_systems()",
        "detail": "modules.Storage.EFS.efs_metrics",
        "documentation": {}
    },
    {
        "label": "list_fsx_filesystems",
        "kind": 2,
        "importPath": "modules.Storage.FSx.fsx",
        "description": "modules.Storage.FSx.fsx",
        "peekOfCode": "def list_fsx_filesystems(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('fsx', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_file_systems(",
        "detail": "modules.Storage.FSx.fsx",
        "documentation": {}
    },
    {
        "label": "list_fsx_volumes",
        "kind": 2,
        "importPath": "modules.Storage.FSx.fsx",
        "description": "modules.Storage.FSx.fsx",
        "peekOfCode": "def list_fsx_volumes(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('fsx', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_volumes(",
        "detail": "modules.Storage.FSx.fsx",
        "documentation": {}
    },
    {
        "label": "list_fsx_filecache",
        "kind": 2,
        "importPath": "modules.Storage.FSx.fsx",
        "description": "modules.Storage.FSx.fsx",
        "peekOfCode": "def list_fsx_filecache(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('fsx', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.describe_file_caches(",
        "detail": "modules.Storage.FSx.fsx",
        "documentation": {}
    },
    {
        "label": "fsx_filesystem_metrics",
        "kind": 2,
        "importPath": "modules.Storage.FSx.fsx_metrics",
        "description": "modules.Storage.FSx.fsx_metrics",
        "peekOfCode": "def fsx_filesystem_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    account_id = account['account_id']\n    while True:\n        try:\n            client = session.client('fsx', region_name=region)\n            inventory = []\n            response = client.describe_file_systems(\n                NextToken=next_token) if next_token else client.describe_file_systems()",
        "detail": "modules.Storage.FSx.fsx_metrics",
        "documentation": {}
    },
    {
        "label": "list_s3_buckets",
        "kind": 2,
        "importPath": "modules.Storage.S3.s3",
        "description": "modules.Storage.S3.s3",
        "peekOfCode": "def list_s3_buckets(file_path, session, region='us-east-1', time_generated=None, account=None):\n    next_token = None\n    idx = 0\n    client = session.client('s3', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_buckets()",
        "detail": "modules.Storage.S3.s3",
        "documentation": {}
    },
    {
        "label": "s3_metrics",
        "kind": 2,
        "importPath": "modules.Storage.S3.s3_metrics",
        "description": "modules.Storage.S3.s3_metrics",
        "peekOfCode": "def s3_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('s3', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.list_buckets()\n            for resource in response.get('Buckets', []):",
        "detail": "modules.Storage.S3.s3_metrics",
        "documentation": {}
    },
    {
        "label": "list_storagegateway",
        "kind": 2,
        "importPath": "modules.Storage.StorageGateway.storagegateway",
        "description": "modules.Storage.StorageGateway.storagegateway",
        "peekOfCode": "def list_storagegateway(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('storagegateway', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_gateways(",
        "detail": "modules.Storage.StorageGateway.storagegateway",
        "documentation": {}
    },
    {
        "label": "list_transferfamily",
        "kind": 2,
        "importPath": "modules.Storage.TransferFamily.transferfamily",
        "description": "modules.Storage.TransferFamily.transferfamily",
        "peekOfCode": "def list_transferfamily(file_path, session, region, time_generated, account):\n    next_token = None\n    idx = 0\n    client = session.client('transfer', region_name=region)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    while True:\n        try:\n            inventory = []\n            response = client.list_servers(",
        "detail": "modules.Storage.TransferFamily.transferfamily",
        "documentation": {}
    },
    {
        "label": "transferfamily_metrics",
        "kind": 2,
        "importPath": "modules.Storage.TransferFamily.transferfamily_metrics",
        "description": "modules.Storage.TransferFamily.transferfamily_metrics",
        "peekOfCode": "def transferfamily_metrics(file_path, session, region, account, metrics, time_generated):\n    next_token = None\n    idx = 0\n    client = session.client('transfer', region_name=region)\n    account_id = account['account_id']\n    while True:\n        try:\n            inventory = []\n            response = client.list_servers(\n                NextToken=next_token) if next_token else client.list_servers()",
        "detail": "modules.Storage.TransferFamily.transferfamily_metrics",
        "documentation": {}
    },
    {
        "label": "remove_duplicates",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def remove_duplicates(dicts):\n    seen = set()\n    unique_dicts = []\n    for d in dicts:\n        # Convert dictionary to a sorted tuple of items\n        items_tuple = tuple(sorted(d.items()))\n        if items_tuple not in seen:\n            seen.add(items_tuple)\n            unique_dicts.append(d)\n    return unique_dicts",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "create_folder_if_not_exist",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def create_folder_if_not_exist(list_dir_path):\n    \"\"\"\n    The function `create_folder_if_not_exist` checks if a list of directories exist and creates them if\n    they do not.\n    :param list_dir_path: A list of directory paths for which you want to create folders if they do not\n    already exist\n    \"\"\"\n    for i in list_dir_path:\n        if not path.exists(i):\n            mkdir(i)",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "chunk_list",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def chunk_list(data, chunk_size=499):\n    for i in range(0, len(data), chunk_size):\n        yield data[i:i + chunk_size]\ndef list_az(session, region):\n    try:\n        inventory = []\n        client = session.client('ec2', region_name=region)\n        response = client.describe_availability_zones()\n        for zone in response['AvailabilityZones']:\n            inventory.append(zone['ZoneName'])",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "list_az",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def list_az(session, region):\n    try:\n        inventory = []\n        client = session.client('ec2', region_name=region)\n        response = client.describe_availability_zones()\n        for zone in response['AvailabilityZones']:\n            inventory.append(zone['ZoneName'])\n    except Exception as e:\n        print(e)\n    return inventory",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def extract_common_info(arn, resource, region, account_id, timegenerated, account_name=\"\"):\n    \"\"\"\n    The function `extract_common_info` takes specific parameters and returns a dictionary containing\n    common information related to a resource.\n    :param arn: An Amazon Resource Name (ARN) is a unique identifier assigned to resources in AWS. It\n    includes information about the AWS region, account ID, resource type, and a unique identifier for\n    the resource\n    :param resource: Resource refers to the specific information or data related to a particular AWS\n    resource that you want to extract common information from. This could include details such as\n    resource type, configuration settings, tags, etc",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_common_info_metrics",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def extract_common_info_metrics(account_id, id, resource, label, timegenerated, account_name):\n    \"\"\"\n    The function `extract_common_info_metrics` extracts common information metrics including account ID,\n    resource properties, label, time generated, and account name.\n    :param account_id: The `account_id` parameter in the `extract_common_info_metrics` function\n    represents the unique identifier of the account to which the metrics belong. It is used to associate\n    the metrics data with a specific account in the system\n    :param id: The `id` parameter in the `extract_common_info_metrics` function represents the unique\n    identifier associated with the resource or data being processed. It is used to uniquely identify the\n    data or resource within the system",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "datetime_converter",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def datetime_converter(o):\n    \"\"\"\n    The function `datetime_converter` attempts to convert a datetime object to a string representation.\n    :param o: The `o` parameter in the `datetime_converter` function is used to represent the object\n    that needs to be converted to a string representation. The function attempts to convert the object\n    `o` to a string if it is an instance of the `datetime` class\n    :return: If the input `o` is an instance of the `datetime` class, then the `__str__()`\n    representation of that datetime object is being returned.\n    \"\"\"\n    try:",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def save_as_file_parquet(inventory, file_path, file_name):\n    \"\"\"\n    The function `save_as_file_parquet` takes an inventory, file path, and file name as input, converts\n    the inventory data into a DataFrame, ensures consistent data types for Parquet compatibility, and\n    saves the DataFrame to a Parquet file at the specified path.\n    :param inventory: Inventory is a list of dictionaries containing data that you want to save to a\n    Parquet file. Each dictionary represents a row of data with keys as column names and values as the\n    corresponding data for that row\n    :param file_path: The `file_path` parameter in the `save_as_file_parquet` function refers to the\n    directory path where you want to save the Parquet file. It should be a string representing the",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "save_as_file_parquet_metrics",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def save_as_file_parquet_metrics(metrics, file_path, file_name):\n    try:\n        if metrics:\n            df = DataFrame(metrics)\n            file_path = path.join(file_path, file_name)\n            df.to_parquet(file_path, index=False)\n    except Exception as ex:\n        print(f\"save_as_file_parquet_metrics function faild \\n{ex}\")\ndef get_script_name_without_extension(script_path):\n    \"\"\"",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_script_name_without_extension",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def get_script_name_without_extension(script_path):\n    \"\"\"\n    Extracts the script name without the .py extension from the full path.\n    \"\"\"\n    return path.splitext(path.basename(script_path))[0]\ndef generate_parquet_prefix(script_path, region, account_id, idx):\n    \"\"\"\n    Generates a prefix for a Parquet file including the script name, region, and account_id.\n    \"\"\"\n    script_name = get_script_name_without_extension(script_path)",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_parquet_prefix",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def generate_parquet_prefix(script_path, region, account_id, idx):\n    \"\"\"\n    Generates a prefix for a Parquet file including the script name, region, and account_id.\n    \"\"\"\n    script_name = get_script_name_without_extension(script_path)\n    return f'{script_name}-{region}-{account_id}-{idx}.parquet'\ndef cw_build_metrics_queries(resource_ids, namespace, metric_name, dimensions_name, dimensions, statistics, granularity):\n    query_list = []\n    query_idx = {}\n    dimensions_addons = []",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "cw_build_metrics_queries",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def cw_build_metrics_queries(resource_ids, namespace, metric_name, dimensions_name, dimensions, statistics, granularity):\n    query_list = []\n    query_idx = {}\n    dimensions_addons = []\n    for dimension in dimensions:\n        for key, value in dimension.items():\n            dimensions_addons.append({\"Name\": key, \"Value\": value})\n    for i, resource_id in enumerate([f'{resource_id}@{stat}' for stat in statistics for resource_id in resource_ids], start=1):\n        dimensions_template = [\n            {",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "cw_build_metrics_queries_custom",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def cw_build_metrics_queries_custom(resource_ids, namespace, metric_name, dimensions_name, dimensions, statistics, granularity, custom_type_value, addons):\n    query_list = []\n    enum_list = []\n    query_idx = {}\n    dimensions_addons = []\n    for dimension in dimensions:\n        for key, value in dimension.items():\n            dimensions_addons.append({\"Name\": key, \"Value\": value})\n    if addons['type'] in custom_type_value.keys():\n        for cluster in addons['nodes']:",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def get_resource_utilization_metric(session, region, inventory, account, metrics, timegenerated, addons={}):\n    client = session.client('cloudwatch', region_name=region)\n    account_id = account['account_id']\n    end_time = datetime.utcnow()\n    query = []\n    resource_metrics_list = []\n    custom_type_value = {\n        'elasticache': {\n            'parent': 'CacheClusterId',\n            'comparison_value': 'CacheNodeId'",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_memory_usage",
        "kind": 2,
        "importPath": "bdika",
        "description": "bdika",
        "peekOfCode": "def get_memory_usage():\n    process = Process(getpid())\n    return process.memory_info().rss\n# Measure memory usage before importing boto3\nmemory_before = get_memory_usage()\nprint(f\"Memory usage before importing modules: {memory_before / (1024*1024):.2f} MB\")\n# Import boto3\nimport boto3\nimport concurrent.futures\nimport datetime",
        "detail": "bdika",
        "documentation": {}
    },
    {
        "label": "memory_before",
        "kind": 5,
        "importPath": "bdika",
        "description": "bdika",
        "peekOfCode": "memory_before = get_memory_usage()\nprint(f\"Memory usage before importing modules: {memory_before / (1024*1024):.2f} MB\")\n# Import boto3\nimport boto3\nimport concurrent.futures\nimport datetime\nimport pandas as pd\nimport json\nimport os\nimport threading",
        "detail": "bdika",
        "documentation": {}
    },
    {
        "label": "memory_after",
        "kind": 5,
        "importPath": "bdika",
        "description": "bdika",
        "peekOfCode": "memory_after = get_memory_usage()\nprint(f\"Memory usage after importing modules: {memory_after / (1024*1024):.2f} MB\")",
        "detail": "bdika",
        "documentation": {}
    },
    {
        "label": "get_resource_utilization_metric",
        "kind": 2,
        "importPath": "cloudwatch_logic",
        "description": "cloudwatch_logic",
        "peekOfCode": "def get_resource_utilization_metric(session, ids: str, metricname: str, statistics: list, unit: str, name_dimensions: str, serviceType: str, account, days=30):\n    client = session.client('cloudwatch', region_name=region_name)\n    account_id = account['account_id']\n    account_name = str(account['account_name']).replace(\" \", \"_\")\n    start_timer = datetime.now()\n    end_time = datetime.utcnow()\n    start_time = end_time - timedelta(days)\n    response = client.get_metric_data(\n        MetricDataQueries=query,\n        StartTime=start_time,",
        "detail": "cloudwatch_logic",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    \"\"\"\n    The main function reads account information from a JSON file, creates AWS sessions for each account,\n    and then runs parallel tasks to gather inventory and list S3 buckets for each account.\n    \"\"\"\n    # arranging all os configs such as path of file runing or create folders if not exist\n    mode = environ.get('MODE', 'metrics')\n    main_dir = path.dirname(path.abspath(__file__))\n    uploads = f'{main_dir}/uploads'\n    create_folder_if_not_exist([f'{main_dir}/uploads', f'{main_dir}/files',",
        "detail": "main",
        "documentation": {}
    }
]